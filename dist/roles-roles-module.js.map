{"version":3,"sources":["webpack:///./src/app/roles/roles.component.html","webpack:///./src/app/roles/roles.component.scss","webpack:///./src/app/roles/roles.component.ts","webpack:///./src/app/roles/roles.module.ts","webpack:///./src/app/roles/roles.routing.ts","webpack:///./src/app/roles/roles.service.ts"],"names":[],"mappings":"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","file":"roles-roles-module.js","sourcesContent":["module.exports = \"<!-- ============================================================== -->\\n<!-- Card Grid-->\\n<!-- ============================================================== -->\\n<div fxLayout=\\\"row wrap\\\">\\n  <div fxFlex.gt-sm=\\\"100\\\" fxFlex=\\\"100\\\">\\n    <mat-card>\\n      <mat-card-content>\\n        <mat-card-title>Roles</mat-card-title>\\n\\n        <!-- ============================================================== -->\\n        <!-- column -->\\n        <!-- ============================================================== -->\\n        <div fxLayout=\\\"row wrap\\\">\\n        <!-- Card column -->\\n                <div fxFlex.gt-sm=\\\"100%\\\" fxFlex=\\\"100\\\">\\n                <h5>Change Password</h5>\\n\\n                           <form [formGroup]=\\\"form\\\" class=\\\"basic-form\\\" (ngSubmit)=\\\"onSubmitPassword()\\\">\\n\\n                                <div fxLayout=\\\"row wrap\\\">\\n                                  <!-- column -->\\n                                  <div fxFlex.gt-md=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                    <mat-form-field>\\n                                        <mat-card-title>Current Password</mat-card-title>\\n                                      <input matInput type=\\\"password\\\" placeholder=\\\"\\\" [formControl]=\\\"form.controls['currentPassword']\\\" [(ngModel)]= \\\"currentPassword\\\">\\n                                    </mat-form-field>\\n                                  </div>\\n                                   <div fxFlex.gt-md=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                    <mat-form-field>\\n                                        <mat-card-title>New Password</mat-card-title>\\n                                      <input matInput type=\\\"password\\\" placeholder=\\\"\\\" [formControl]=\\\"form.controls['newPassword']\\\" [(ngModel)]=\\\"newPassword\\\">\\n                                    </mat-form-field>\\n                                  </div>\\n                                   <div fxFlex.gt-md=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                    <mat-form-field>\\n                                        <mat-card-title>Repeat Password</mat-card-title>\\n                                      <input matInput type=\\\"password\\\" placeholder=\\\"\\\" [formControl]=\\\"form.controls['repeatPassword']\\\" [(ngModel)]=\\\"repeatPassword\\\">\\n                                    </mat-form-field>\\n                                  </div>                   \\n                                 </div> \\n                                  <mat-card-actions>\\n                                    <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\">Submit</button>\\n                                  </mat-card-actions>\\n                                  <small *ngIf=\\\"errorLogin\\\" class=\\\"text-danger support-text\\\">{{errortext}}</small>\\n                                  <small  class=\\\"text-success support-text\\\">{{successtext}}</small>\\n\\n                                  <!-- column -->\\n                              </form>  \\n        </div>\\n      </div>\\n \\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\\n\"","module.exports = \".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%; }\\n\\n.example-full-width {\\n  width: 90%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcm9sZXMvQzpcXHhhbXBwXFxodGRvY3NcXGplZXZlYW5hbHl0aWNzXFxjbGllbnQyL3NyY1xcYXBwXFxyb2xlc1xccm9sZXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxpQkFBZ0I7RUFDaEIsaUJBQWdCO0VBQ2hCLFlBQVcsRUFDWjs7QUFFRDtFQUNFLFdBQVUsRUFDWCIsImZpbGUiOiJzcmMvYXBwL3JvbGVzL3JvbGVzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV4YW1wbGUtZm9ybSB7XG4gIG1pbi13aWR0aDogMTUwcHg7XG4gIG1heC13aWR0aDogNTAwcHg7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uZXhhbXBsZS1mdWxsLXdpZHRoIHtcbiAgd2lkdGg6IDkwJTtcbn1cbiJdfQ== */\"","import { Component,OnInit, AfterViewInit  } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { FormControl, Validators } from '@angular/forms';\nimport { RolesService } from './roles.service';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { CookieService, CookieOptionsArgs } from \"angular2-cookie/core\";\n\n@Component({\n  selector: 'app-formlayout',\n  templateUrl: './roles.component.html',\n  styleUrls: ['./roles.component.scss']\n})\nexport class RolesComponent implements OnInit {\n   public form: FormGroup;\n\n   public clinic_id:any ={};\n\n          private warningMessage: string;\n          public id:any ={};\n          public clinicName:any =0;\n          public contactName =0;\n          // public chartData: any[] = [];\n          public address:any = {};\n          public practice_size:any ={};\n          options: FormGroup;\n          public xero_link;\n          public xeroConnect = false;\n          public xeroOrganization='';\n          public email;\n  constructor(private _cookieService: CookieService, private fb: FormBuilder,  private rolesService: RolesService, private route: ActivatedRoute) {\n    this.options = fb.group({\n      hideRequired: false,\n      floatLabel: 'auto'\n    });\n  }\n  ngOnInit() {\n      this.route.params.subscribe(params => {\n    this.id = this.route.snapshot.paramMap.get(\"id\");\n    this.displayName = this._cookieService.get(\"display_name\");\n    this.email = this._cookieService.get(\"email\");\n    //  this.getprofileSettings();\n          $('#title').html('Profile Settings');\n          $('.header_filters').hide();\n         // this.checkXeroStatus();\n     });\n  \n\n      this.form = this.fb.group({\n      currentPassword: [null, Validators.compose([Validators.required])],\n      newPassword: [null, Validators.compose([Validators.required])],\n      repeatPassword: [null, Validators.compose([Validators.required])]      \n    });\n  }\n\n  // Sufix and prefix\n  hide = true;\n\n\n  getprofileSettings() {\n  this.rolesService.getprofileSettings(this.id).subscribe((res) => {\n       if(res.message == 'success'){\n        this.displayName = res.data[0].displayName;\n        this.email = res.data[0].email;\n       }\n    }, error => {\n      this.warningMessage = \"Please Provide Valid Inputs!\";\n    }    \n    );\n  }\n\npublic displayName;\npublic display_name;\n  onSubmitBasic() {\n  this.displayName = $(\"#displayName\").val();\n  this.email = $(\"#email\").val();\n  this.imageURL = $(\"#imageURL\").val();\n\n   this.rolesService.updateprofileSettings(this.displayName, this.email, this.imageURL).subscribe((res) => {\n       if(res.message == 'success'){\n        let opts: CookieOptionsArgs = {\n            expires: new Date('2030-07-19')\n        };\n        this._cookieService.put(\"display_name\", this.displayName, opts);\n        this._cookieService.put(\"user_image\", this.imageURL, opts);\n        this.display_name = this.displayName;\n        alert('Profile Settings Updated');\n       }\n    }, error => {\n      this.warningMessage = \"Please Provide Valid Inputs!\";\n    }    \n    );\n  } \n\npublic errorLogin = false;\n  public errortext =\"\";\n  public successLogin =false;\n  public successtext =\"\";\n\npublic currentPassword;\npublic newPassword;\npublic repeatPassword;\n onSubmitPassword() {\n  this.errorLogin = false;\n  this.errortext =\"\";\n  this.successLogin = false;\n  this.successtext =\"\";\n  this.currentPassword = this.form.value.currentPassword;\n  this.newPassword = this.form.value.newPassword;\n  this.repeatPassword = this.form.value.repeatPassword;\n  if(this.newPassword == this.repeatPassword) {\n   this.rolesService.updatePassword(this.currentPassword, this.newPassword).subscribe((res) => {\n       if(res.message == 'success'){\n        this.successLogin = true;\n        this.successtext = res.data;\n       }\n       else{\n          this.errorLogin = true;     \n          this.errortext = res.data;\n        }\n    }, error => {\n      this.errorLogin = true;\n      this.errortext = \"Please Provide Valid Inputs!\";\n    }    \n    );\n }\n else {\n  this.errorLogin = true;\n  this.errortext =\"Password doesn't Match!\";\n }\n  } \n  public imageURL:any;\npublic fileToUpload;\n uploadImage(files: FileList) {\n    this.fileToUpload = files.item(0);\n    let formData = new FormData();\n    formData.append('file', this.fileToUpload, this.fileToUpload.name);\n    this.rolesService.logoUpload(formData).subscribe((res) => {\n      if(res.message == 'success'){\n        this.imageURL= res.data;\n      }\n    });\n  }\n\n\n\n\n}\n","import 'hammerjs';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { DemoMaterialModule } from '../demo-material-module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { RolesRoutes } from './roles.routing';\nimport { QuillModule } from 'ngx-quill';\nimport { FileUploadModule } from 'ng2-file-upload/ng2-file-upload';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\n\nimport { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';\n\nimport { RolesComponent } from './roles.component';\n\nimport { RolesService } from './roles.service';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(RolesRoutes),\n    DemoMaterialModule,\n    FlexLayoutModule,\n    FormsModule,\n    QuillModule,\n    ReactiveFormsModule,\n    FileUploadModule,\n    MatTreeModule,\n    MatDatepickerModule,\n    NgMultiSelectDropDownModule.forRoot()\n  ],\n  providers: [\n    RolesService\n  ],\n  declarations: [\n    RolesComponent\n  ]\n})\nexport class RolesModule {}\n","import { Routes } from '@angular/router';\n\nimport { RolesComponent } from './roles.component';\n\nexport const RolesRoutes: Routes = [\n  {\n   path: '',\n    component: RolesComponent,\n    data: {\n      title: 'Roles'\n    }\n  }\n];\n","\nimport {map} from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { CookieService } from \"angular2-cookie/core\";\nimport { environment } from \"../../environments/environment\";\n\n@Injectable()\nexport class RolesService {\n\n   public token: string;\n    private headers: HttpHeaders;\n    private apiUrl = environment.apiUrl;\n\n    constructor(private http: HttpClient,private _cookieService: CookieService) {\n        //append headers\n        this.headers = new HttpHeaders();\n        this.headers.append(\"Content-Type\", 'application/json');\n        this.headers.append(\"Access-Control-Allow-Origin\", \"*\");\n        this.headers.append(\"Access-Control-Allow-Headers\", \"Origin, Authorization, Content-Type, Accept\");\n   }\n\n\n   // Get profileSettings\n    getprofileSettings( clinic_id='1', user_id = this._cookieService.get(\"userid\"),token = this._cookieService.get(\"token\")): Observable<any> {\n        return this.http.get(this.apiUrl +\"/Users/getPractices?user_id=\"+user_id+\"&clinic_id=\"+clinic_id+\"&token=\"+this._cookieService.get(\"token\"), { headers: this.headers })\n        .pipe(map((response: Response) => {\n                        return response;\n                    })\n        );\n    }\n       // Get updateprofileSettings\n    updateprofileSettings(displayName, email, imageURL, token = this._cookieService.get(\"token\")): Observable<any> {\n            const formData = new FormData();\n            formData.append('displayName', displayName);\n            formData.append('email', email);\n            formData.append('user_image', imageURL);            \n            formData.append('id', this._cookieService.get(\"userid\"));\n            formData.append('token', token);\n\n        return this.http.post(this.apiUrl +\"/Users/updateprofileSettings/\", formData)\n        .pipe(map((response: Response) => {\n                        return response;\n                    })\n        );\n    }\n       // Get updatePassword\n    updatePassword(currentPassword, newPassword, token = this._cookieService.get(\"token\")): Observable<any> {\n            const formData = new FormData();\n            formData.append('oldpassword', currentPassword);\n            formData.append('password', newPassword);\n            formData.append('confirm_password', newPassword);            \n            formData.append('id', this._cookieService.get(\"userid\"));\n            formData.append('token', token);\n\n        return this.http.post(this.apiUrl +\"/Users/changePasswordApi/\", formData)\n        .pipe(map((response: Response) => {\n                        return response;\n                    })\n        );\n    }\n\n    logoUpload( formData): Observable<any> {\n        formData.append('id', this._cookieService.get(\"userid\"));\n            formData.append('token', this._cookieService.get(\"token\"));\n\n        return this.http.post(this.apiUrl +\"/Users/logoUpload/\", formData)\n        .pipe(map((response: Response) => {\n                        return response;\n                    })\n        );\n    }\n\n    clearSession( clinic_id='1', user_id = this._cookieService.get(\"userid\"),token = this._cookieService.get(\"token\")): Observable<any> {\n        return this.http.get(this.apiUrl +\"/Xeros/clearSession/?getxero=1?user_id=\"+user_id+\"&clinic_id=\"+clinic_id+\"&token=\"+this._cookieService.get(\"token\"), { headers: this.headers })\n        .pipe(map((response: Response) => {\n                        return response;\n                    })\n        );\n    }\n       \n}\n\n"],"sourceRoot":""}