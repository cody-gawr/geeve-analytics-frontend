{"version":3,"sources":["webpack:///./src/app/authentication/authentication.module.ts","webpack:///./src/app/authentication/authentication.routing.ts","webpack:///./src/app/authentication/error/error.component.html","webpack:///./src/app/authentication/error/error.component.scss","webpack:///./src/app/authentication/error/error.component.ts","webpack:///./src/app/authentication/forgot/forgot.component.html","webpack:///./src/app/authentication/forgot/forgot.component.scss","webpack:///./src/app/authentication/forgot/forgot.component.ts","webpack:///./src/app/authentication/lockscreen/lockscreen.component.html","webpack:///./src/app/authentication/lockscreen/lockscreen.component.scss","webpack:///./src/app/authentication/lockscreen/lockscreen.component.ts","webpack:///./src/app/authentication/login/login.component.html","webpack:///./src/app/authentication/login/login.component.scss","webpack:///./src/app/authentication/login/login.component.ts","webpack:///./src/app/authentication/register/register.component.html","webpack:///./src/app/authentication/register/register.component.scss","webpack:///./src/app/authentication/register/register.component.ts","webpack:///./src/app/authentication/reset/reset.component.html","webpack:///./src/app/authentication/reset/reset.component.scss","webpack:///./src/app/authentication/reset/reset.component.ts"],"names":[],"mappings":"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","file":"authentication-authentication-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatIconModule,\n  MatCardModule,\n  MatInputModule,\n  MatCheckboxModule,\n  MatButtonModule\n} from '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { AuthenticationRoutes } from './authentication.routing';\nimport { ErrorComponent } from './error/error.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ResetComponent } from './reset/reset.component';\nimport { LoginService } from '../login/login.service';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthenticationRoutes),\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [\n    LoginService\n  ],  \n  declarations: [\n    ErrorComponent,\n    ForgotComponent,\n    LockscreenComponent,\n    LoginComponent,\n    RegisterComponent,\n    ResetComponent\n  ]\n})\nexport class AuthenticationModule {}\n","import { Routes } from '@angular/router';\n\nimport { ErrorComponent } from './error/error.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ResetComponent } from './reset/reset.component';\nexport const AuthenticationRoutes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: '404',\n        component: ErrorComponent\n      },\n      {\n        path: 'forgot',\n        component: ForgotComponent\n      },\n      {\n        path: 'lockscreen',\n        component: LockscreenComponent\n      },\n      {\n        path: 'login',\n        component: LoginComponent\n      },\n      {\n        path: 'register/:id',\n        component: RegisterComponent\n      },\n      {\n        path: 'reset/:id',\n        component: ResetComponent\n      }\n    ]\n  }\n];\n","module.exports = \"<div class=\\\"login-register\\\">\\n    <div class=\\\"login-register-box error-card text-center\\\">\\n        <h1>404</h1>\\n        <h3 class=\\\"text-uppercase\\\">Page Not Found !</h3>\\n        <p class=\\\"text-muted m-t-30 m-b-30\\\">You seem to be trying to find this way to home</p>\\n        <a mat-raised-button color=\\\"primary\\\" [routerLink]=\\\"['/']\\\" class=\\\"btn btn-info btn-rounded waves-effect waves-light m-b-40\\\">Back to home</a>\\n    </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2Vycm9yL2Vycm9yLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\nexport class ErrorComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","module.exports = \"<div class=\\\"sa_login_blur\\\" style=\\\"background:url('../../assets/images/background/login-register_60.jpg')!important; background-size:cover!important; filter:blur(20px)!important; position:absolute; width:100%; height: 100vh;\\ndisplay: flex;\\nbackground-size: cover;\\nalign-items: center;\\\"></div>\\n<img class=\\\"login_abso_logo\\\" src=\\\"../assets/images/logo-text-white.png\\\">   \\n<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.jpg);\\\">\\n    <div class=\\\"login-register-box\\\">\\n    <mat-card>\\n      <mat-card-content>\\n        <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n          <div class=\\\"text-center\\\">\\n            <img alt=\\\"homepage\\\" src=\\\"../assets/images/logo-icon.gif\\\">\\n            <h4 class=\\\"m-t-0\\\">Recover Password</h4>\\n          </div>\\n          <p class=\\\"text-center font-14\\\">Enter your email and we'll send you the password reset link.</p>\\n\\n          <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around\\\">\\n            <div class=\\\"pb-1\\\">\\n              <mat-form-field style=\\\"width: 100%\\\">\\n                <input matInput placeholder=\\\"Email address\\\" type=\\\"email\\\" [formControl]=\\\"form.controls['email']\\\">\\n              </mat-form-field>\\n              <small *ngIf=\\\"form.controls['email'].hasError('required') && form.controls['email'].touched\\\" class=\\\"text-danger support-text\\\">Please enter registered email address.</small>\\n              <small *ngIf=\\\"form.controls['email'].errors?.email && form.controls['email'].touched\\\" class=\\\"text-danger support-text\\\">Please enter registered email address.</small>\\n              <small *ngIf=\\\"errorLogin ==true && errorLoginText != ''\\\" class=\\\"text-danger support-text\\\">{{errorLoginText}}</small>\\n               <small *ngIf=\\\"successLogin ==true && successLoginText != ''\\\" class=\\\"text-success support-text\\\">{{successLoginText}}</small>\\n            </div>\\n            <div class=\\\"text-right\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <span>\\n                <a [routerLink]=\\\"['/login']\\\" class=\\\"link text-info\\\"> Login</a>\\n              </span>\\n            </div>\\n            <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"btn-block btn-lg m-t-20\\\" [disabled]=\\\"!form.valid\\\">Submit</button>\\n          </div>\\n        </form>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2ZvcmdvdC9mb3Jnb3QuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl\n} from '@angular/forms';\nimport { CustomValidators } from 'ng2-validation';\nimport { LoginService } from '../../login/login.service';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.scss']\n})\nexport class ForgotComponent implements OnInit {\n  public form: FormGroup;\n  public errorLogin = false;\n  public errorLoginText = '';\n  public successLogin = false;\n  public successLoginText = '';\n  constructor(private fb: FormBuilder, private router: Router, private loginService: LoginService) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      email: [\n        null,\n        Validators.compose([Validators.required, CustomValidators.email])\n      ]\n    });\n  }\n\n  onSubmit() {\n      this.loginService.checkEmail(this.form.value.email).subscribe((res) => {\n          this.errorLogin = false;\n          this.errorLoginText = '';\n          this.successLogin = false;\n          this.successLoginText = '';\n           if(res.message == 'success'){\n              this.successLogin  =true;\n              this.successLoginText  =res.data;\n            }\n           else if(res.message == 'error'){\n              this.errorLogin  =true;\n              this.errorLoginText  =res.data;\n           }\n        }, error => {\n    });\n  //  this.router.navigate(['/login']);\n  }\n}\n","module.exports = \"<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.jpg);\\\">\\n  <div class=\\\"login-register-box\\\">\\n    <mat-card>\\n      <mat-card-content>\\n        <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n          <div class=\\\"text-center\\\">\\n            <img src=\\\"assets/images/users/1.jpg\\\" class=\\\"img-circle\\\" width=\\\"80\\\" alt=\\\"user\\\" title=\\\"user\\\" />\\n            <h4 class=\\\"m-t-0\\\">David Miller</h4>\\n          </div>\\n\\n          <div fxLayout=\\\"row wrap\\\">\\n            <!-- col full-->\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <mat-form-field style=\\\"width: 100%\\\">\\n                <input matInput placeholder=\\\"Username\\\" [formControl]=\\\"form.controls['uname']\\\">\\n              </mat-form-field>\\n              <small *ngIf=\\\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\\\" class=\\\"text-danger support-text\\\">Username is required.</small>\\n            </div>\\n            <!-- col full-->\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <button mat-raised-button class=\\\"btn-block btn-lg m-t-10 m-b-10\\\" color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Unlock</button>\\n            </div>\\n          </div>\\n        </form>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2xvY2tzY3JlZW4vbG9ja3NjcmVlbi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-lockscreen',\n  templateUrl: './lockscreen.component.html',\n  styleUrls: ['./lockscreen.component.scss']\n})\nexport class LockscreenComponent implements OnInit {\n  public form: FormGroup;\n  constructor(private fb: FormBuilder, private router: Router) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      uname: [null, Validators.compose([Validators.required])]\n    });\n  }\n\n  onSubmit() {\n    this.router.navigate(['/']);\n  }\n}\n","module.exports = \"<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.jpg);\\\">\\n    <div class=\\\"login-register-box\\\">\\n        <mat-card>\\n            <mat-card-content>\\n                <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                    <div class=\\\"text-center\\\">\\n                        <img alt=\\\"homepage\\\" src=\\\"assets/images/logo-icon.png\\\">\\n                        <h4 class=\\\"m-t-0\\\">Login to App</h4>\\n                    </div>\\n\\n                    <div fxLayout=\\\"row wrap\\\">\\n                        <!-- col full-->\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                            <mat-form-field>\\n                                <input matInput placeholder=\\\"Username\\\" [formControl]=\\\"form.controls['uname']\\\">\\n                            </mat-form-field>\\n                            <small *ngIf=\\\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\\\" class=\\\"text-danger support-text\\\">Username is required.</small>\\n                        </div>\\n                        <!-- col full-->\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                            <mat-form-field>\\n                                <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" [formControl]=\\\"form.controls['password']\\\">\\n                            </mat-form-field>\\n                            <small *ngIf=\\\"form.controls['password'].hasError('required') && form.controls['password'].touched\\\" class=\\\"text-danger support-text\\\">Password is required.</small>\\n                        </div>\\n                        <!-- col half-->\\n                        <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\">\\n                            <mat-checkbox color=\\\"warn\\\">Remember me</mat-checkbox>\\n                        </div>\\n                        <!-- col half-->\\n                        <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"text-right\\\">\\n                            <a [routerLink]=\\\"['/authentication/forgot']\\\" class=\\\"link\\\">Forgot password?</a>\\n                        </div>\\n                        <!-- col full-->\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                            <button mat-raised-button color=\\\"primary\\\" class=\\\"btn-block btn-lg m-t-20 m-b-20\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Login</button>\\n                        </div>\\n                        <!-- col full-->\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-center\\\">\\n                            <span>Don't have an account?\\n                                <a [routerLink]=\\\"['/authentication/register']\\\" class=\\\"text-info link\\\">Register</a>\\n                            </span>\\n                        </div>\\n                    </div>\\n                </form>\\n            </mat-card-content>\\n        </mat-card>\\n    </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public form: FormGroup;\n  constructor(private fb: FormBuilder, private router: Router) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      uname: [null, Validators.compose([Validators.required])],\n      password: [null, Validators.compose([Validators.required])]\n    });\n  }\n\n  onSubmit() {\n    this.router.navigate(['/dashboard/dashboard1']);\n  }\n}\n","module.exports = \"<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.jpg);\\\">\\n  <div class=\\\"login-register-box\\\">\\n    <mat-card>\\n      <mat-card-content>\\n        <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n          <div class=\\\"text-center\\\">\\n           <img alt=\\\"homepage\\\" src=\\\"../assets/images/logo-icon.gif\\\">\\n                        <h4 class=\\\"m-t-0\\\">Register to Jeeve Analytics</h4>\\n          </div>\\n          <div fxLayout=\\\"row wrap\\\">\\n            <!-- col full-->\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <mat-form-field style=\\\"width: 100%\\\">\\n                <input matInput placeholder=\\\"Email address\\\" type=\\\"email\\\" [formControl]=\\\"form.controls['email']\\\">\\n              </mat-form-field>\\n              <small *ngIf=\\\"errorLogin ==true && errorLoginText != ''\\\" class=\\\"text-danger support-text\\\">{{errorLoginText}}</small>\\n              <small *ngIf=\\\"form.controls['email'].hasError('required') && form.controls['email'].touched\\\" class=\\\"text-danger support-text\\\">You must include an email address.</small>\\n              <small *ngIf=\\\"form.controls['email'].errors?.email && form.controls['email'].touched\\\" class=\\\"text-danger support-text\\\">You must include a valid email address.</small>\\n            </div>\\n            <!-- col full-->\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <mat-form-field style=\\\"width: 100%\\\">\\n                <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" [formControl]=\\\"form.controls['password']\\\">\\n              </mat-form-field>\\n              <small *ngIf=\\\"form.controls['password'].hasError('required') && form.controls['password'].touched\\\" class=\\\"text-danger support-text\\\">You must include password.</small>\\n            </div>\\n            <!-- col full-->\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <mat-form-field style=\\\"width: 100%\\\">\\n                <input matInput placeholder=\\\"Confirm Password\\\" [formControl]=\\\"form.controls['confirmPassword']\\\" type=\\\"password\\\">\\n              </mat-form-field>\\n              <small *ngIf=\\\"form.controls['confirmPassword'].hasError('required') && form.controls['confirmPassword'].touched\\\" class=\\\"text-danger support-text\\\">You must include confirm password.</small>\\n              <small *ngIf=\\\"form.controls['confirmPassword'].errors?.equalTo\\\" class=\\\"text-danger support-text\\\">Password and confirmation password do not match.</small>\\n               \\n               <small *ngIf=\\\"successLogin ==true && successLoginText != ''\\\" class=\\\"text-success support-text\\\">{{successLoginText}}</small>\\n            </div>\\n            <!-- col full-->\\n            <!-- <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <mat-checkbox class=\\\"font-14\\\">I agree to the all\\n                <a href=\\\"javascript:void(0)\\\" class=\\\"link text-info\\\">terms</a>.</mat-checkbox>\\n            </div> -->\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"btn-block btn-lg m-t-20 m-b-20\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Create your account</button>\\n\\n            <div class=\\\"text-center\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <span>Already have an account?\\n                <a [routerLink]=\\\"['/login']\\\" class=\\\"link text-info\\\"> Login</a>\\n              </span>\\n            </div>\\n          </div>\\n        </form>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute, Router } from '@angular/router';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl\n} from '@angular/forms';\nimport { CustomValidators } from 'ng2-validation';\nimport { LoginService } from '../../login/login.service';\n\nconst password = new FormControl('', Validators.required);\nconst confirmPassword = new FormControl('', CustomValidators.equalTo(password));\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  public form: FormGroup;\n    public errorLogin = false;\n  public errorLoginText = '';\n  public successLogin = false;\n  public successLoginText = '';\n   public id:any ={};\n   public plan_id;\n  constructor(private fb: FormBuilder, private router: Router, private loginService: LoginService, private route: ActivatedRoute) {}\n\n  ngOnInit() {\n     this.route.params.subscribe(params => {\n      this.plan_id = this.route.snapshot.paramMap.get(\"id\");\n    });\n    this.form = this.fb.group({\n      email: [\n        null,\n        Validators.compose([Validators.required, CustomValidators.email])\n      ],\n      password: password,\n      confirmPassword: confirmPassword\n    });\n  }\n\n  onSubmit() {\n    this.loginService.checkEmailExists(this.form.value.email).subscribe((res) => {\n          this.errorLogin = false;\n          this.errorLoginText = '';\n          this.successLogin = false;\n          this.successLoginText = '';\n           if(res.message == 'success'){\n                   this.loginService.addUser(this.form.value.email,this.form.value.password,'2',this.plan_id).subscribe((res) => {\n                    this.errorLogin = false;\n                    this.errorLoginText = '';\n                    this.successLogin = false;\n                    this.successLoginText = '';\n                     if(res.message == 'success'){\n                          this.successLogin  =true;\n                          alert('Please confirm your mail and complete the payment!');\n                      }\n                     else if(res.message == 'error'){\n                        this.errorLogin  =true;\n                        this.errorLoginText  =res.data;\n                     }\n                  }, error => {\n              });\n            }\n           else if(res.message == 'error'){\n              this.errorLogin  =true;\n              this.errorLoginText  ='Email already Exists!';\n           }\n        }, error => {\n    });\n  }\n}\n","module.exports = \"<div class=\\\"sa_login_blur\\\" style=\\\"background:url('../../assets/images/background/login-register_60.jpg')!important; background-size:cover!important; filter:blur(20px)!important; position:absolute; width:100%; height: 100vh;\\ndisplay: flex;\\nbackground-size: cover;\\nalign-items: center;\\\"></div>\\n<img class=\\\"login_abso_logo\\\" src=\\\"../assets/images/logo-white.png\\\">   \\n<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.jpg);\\\">\\n    <div class=\\\"login-register-box\\\">\\n    <mat-card>\\n      <mat-card-content>\\n        <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n          <div class=\\\"text-center\\\">\\n            <img alt=\\\"homepage\\\" src=\\\"../assets/images/logo-icon.gif\\\">\\n            <h4 class=\\\"m-t-0\\\">Reset Password</h4>\\n          </div>\\n          <p class=\\\"text-center font-14\\\">Enter new Password.</p>\\n          <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around\\\">\\n            <div class=\\\"pb-1\\\">\\n              <mat-form-field style=\\\"width: 100%\\\">\\n                <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" [formControl]=\\\"form.controls['password']\\\">\\n              </mat-form-field>\\n                <mat-form-field style=\\\"width: 100%\\\">\\n                <input matInput placeholder=\\\"Confirm Password\\\" type=\\\"password\\\" [formControl]=\\\"form.controls['cpassword']\\\">\\n              </mat-form-field>\\n              <small *ngIf=\\\"form.controls['password'].value !=  form.controls['cpassword'].value\\\" class=\\\"text-danger support-text\\\">Password and Confirm Password does not match.</small>\\n              <small *ngIf=\\\"errorLogin ==true && errorLoginText != ''\\\" class=\\\"text-danger support-text\\\">{{errorLoginText}}</small>\\n               <small *ngIf=\\\"successLogin ==true && successLoginText != ''\\\" class=\\\"text-success support-text\\\">{{successLoginText}}</small>\\n            </div>\\n            <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"btn-block btn-lg m-t-20\\\" [disabled]=\\\"!form.valid\\\">Submit</button>\\n          </div>\\n        </form>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL3Jlc2V0L3Jlc2V0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl\n} from '@angular/forms';\nimport { CustomValidators } from 'ng2-validation';\nimport { LoginService } from '../../login/login.service';\nimport { ActivatedRoute } from \"@angular/router\";\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.scss']\n})\nexport class ResetComponent implements OnInit {\n  public form: FormGroup;\n  public errorLogin = false;\n  public errorLoginText = '';\n  public successLogin = false;\n  public successLoginText = '';\n   public id:any ={};\n  constructor(private fb: FormBuilder, private router: Router, private loginService: LoginService, private route: ActivatedRoute) {}\n  ngOnInit() {\n    this.form = this.fb.group({ \n      password: [null, Validators.compose([Validators.required])],\n      cpassword: [null, Validators.compose([Validators.required])]\n    });\n          this.route.params.subscribe(params => {\n    this.id = this.route.snapshot.paramMap.get(\"id\");\n     });\n  }\n\n  onSubmit() {\n      this.loginService.resetPassword(this.form.value.password,this.id).subscribe((res) => {\n          this.errorLogin = false;\n          this.errorLoginText = '';\n          this.successLogin = false;\n          this.successLoginText = '';\n           if(res.message == 'success'){\n              this.successLogin  =true;\n              this.successLoginText  =res.data;\n            }\n           else if(res.message == 'error'){\n              this.errorLogin  =true;\n              this.errorLoginText  =res.data;\n           }\n        }, error => {\n    });\n  //  this.router.navigate(['/login']);\n  }\n}\n"],"sourceRoot":""}