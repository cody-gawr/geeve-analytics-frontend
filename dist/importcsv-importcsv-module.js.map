{"version":3,"sources":["webpack:///./src/app/importcsv/importcsv.component.html","webpack:///./src/app/importcsv/importcsv.component.ts","webpack:///./src/app/importcsv/importcsv.module.ts","webpack:///./src/app/importcsv/importcsv.routing.ts","webpack:///./src/app/importcsv/importcsv.service.ts"],"names":[],"mappings":"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","file":"importcsv-importcsv-module.js","sourcesContent":["module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <mat-card-title>Import CSV</mat-card-title>\\n        <span class=\\\"error\\\" [style.display]=\\\"'none'\\\"></span>\\n        <input type='button' value=\\\"Process Files\\\" (click) = \\\"processAllFiles()\\\">\\n        <mat-form-field>\\n            <input matInput type='text' class=\\\"form-control\\\" placeholder='Type to filter file name...' (keyup)='updateFilter($event)'\\n            />\\n        </mat-form-field>\\n        <ngx-datatable #table class='material' [columns]=\\\"columns\\\" [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [footerHeight]=\\\"50\\\"\\n            [rowHeight]=\\\"'auto'\\\" [limit]=\\\"10\\\" [rows]='rows'>\\n            <ngx-datatable-column name=\\\"Name\\\">\\n        <ng-template ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\" let-value=\\\"value\\\" let-row=\\\"row\\\">\\n          {{value}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Date\\\">\\n        <ng-template ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\" let-row=\\\"row\\\" let-value=\\\"value\\\">\\n          <span title=\\\"Double click to edit\\\" >\\n            {{value}}\\n          </span>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Sample\\\">\\n        <ng-template ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\" let-row=\\\"row\\\" let-value=\\\"value\\\">\\n         <a href='{{value}}'>Sample CSV</a>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Select File\\\">\\n        <ng-template ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\" let-row=\\\"row\\\" let-value=\\\"value\\\">\\n           <input #fileInput\\n                         type=\\\"file\\\"\\n                         accept=\\\"csv/*\\\"\\n                         (change)=\\\"processFile(fileInput,[rowIndex],'name')\\\" >\\n                        <span *ngIf=\\\"show\\\">Uploading File...</span>\\n        </ng-template>\\n      </ngx-datatable-column>\\n        </ngx-datatable>\\n    </mat-card-content>\\n</mat-card>\"","import { Component, ViewChild, AfterViewInit, SecurityContext, ViewEncapsulation, OnInit  } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { ImportcsvService } from './importcsv.service';\ndeclare var require: any;\n\nconst data: any = [\n    {\n      name: 'Accounting Invoices and Receipts.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Items Performed Over Period.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Treatment Plan Analysis.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Work Time Analysis.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Efficiency of Referral Sources New Patients.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Status - Attended.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Status - CDBS.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Status - Confirmed.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Status - FTA.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv',      \n    },\n    {\n      name: 'Status - Lab Arrived.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv', \n    },\n    {\n      name: 'Status - Lab Work.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv', \n    },\n    {\n      name: 'Status - Message Given.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv', \n    },\n    {\n      name: 'Status - New Patient.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv', \n    },\n    {\n      name: 'Status - No Status (Non Financial).csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv', \n    },\n    {\n      name: 'Status - Phone Patient.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv', \n    },\n    {\n      name: 'Status - Recall.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv', \n    },\n    {\n      name: 'Status - SMS Sent.csv',\n      date: '2019-04-22',\n      sample: 'sample-csv/Accounting Invoices and Receipts.csv', \n    }\n  ];\n@Component({\n  templateUrl: 'importcsv.component.html'\n})\nexport class ImportcsvComponent implements AfterViewInit {\n  ngAfterViewInit() {\n    this.getLogs();\n  }\n\n  public show= false;\n  selectedFile: FileSnippet;\n    editing = {};\n  rows = [];\n  logData: any = [];\n  arr1: any[] = [];\n  temp = [...data];\n\n  loadingIndicator = true;\n  reorderable = true;\ncurrentDate: any = new Date();\n  columns = [{ prop: 'name' }, { name: 'date' }];\n  @ViewChild(ImportcsvComponent) table: ImportcsvComponent;\n  constructor(private importcsvService: ImportcsvService, private datePipe: DatePipe){\n        this.rows = data;\n    this.temp = [...data];\n    setTimeout(() => {\n      this.loadingIndicator = false;\n    }, 1500);\n  }\n    private warningMessage: string;\n  radioModel: string = 'Month';\n   processFile(fileInput: any,rowIndex,cell) {\n    (<HTMLElement>document.querySelector('.error')).style.display = 'none';\n      (<HTMLElement>document.querySelector('.error')).innerHTML = '';\n\n    const file: File = fileInput.files[0];\n    const reader = new FileReader();\n  //this.show = true;   \n    reader.addEventListener('load', (event: any) => {\n\n      this.selectedFile = new FileSnippet(event.target.result, file);\n      if(this.selectedFile.file.name == this.rows[rowIndex][cell]) {\n      this.importcsvService.uploadFile(this.selectedFile.file).subscribe(\n        (data) => {\n          if(data.message == 'success') {\n          alert('File Uploaded Successfully-'+this.selectedFile.file.name);\n    this.getLogs();\n\n          this.show = false; \n        }\n        else {\n          alert('Error Uploading File-'+this.selectedFile.file.name); \n        }\n        })\n    }\n    else {\n      (<HTMLElement>document.querySelector('.error')).style.display = 'block';\n      (<HTMLElement>document.querySelector('.error')).innerHTML += '<b style = \"color:red\">Incorrect File uploaded for '+this.rows[rowIndex][cell]+'</b>';\n    }\n    });\n\n    reader.readAsDataURL(file);\n}\n private getLogs() {\n  this.importcsvService.getLogs().subscribe((res) => {\n       if(res.message == 'success'){\n         res.data.forEach((result,key) => {\n            var temp = {};\n            temp['name'] = result.filename;\n            temp['sample'] = 'sample-csv/'+result.filename;\n            if(result.uploaded_csv_logs.length >0) {\n              temp['date'] = this.datePipe.transform(result.uploaded_csv_logs[0].created, 'yyyy/MM/dd h:m:s');\n            }\n            else\n              temp['date'] = 'No Uploads Yet';\n\n          this.arr1.push(temp);\n          //    this.productionTotal = this.productionTotal + parseInt(res.total);\n        });\n         this.rows = this.arr1;\n         \n       }\n    }, error => {\n      this.warningMessage = \"Please Provide Valid Inputs!\";\n\n    }    \n    );\n\n  }\n  updateFilter(event) {\n    const val = event.target.value.toLowerCase();\n\n    // filter our data\n    const temp = this.temp.filter(function(d) {\n      return d.name.toLowerCase().indexOf(val) !== -1 || !val;\n    });\n    // update the rows\n    this.rows = temp;\n    // Whenever the filter changes, always go back to the first page\n    this.table = data;\n  }\n  updateValue(event, cell, rowIndex) {\n    console.log('inline editing rowIndex', rowIndex);\n    this.editing[rowIndex + '-' + cell] = false;\n    this.rows[rowIndex][cell] = event.target.value;\n    this.rows = [...this.rows];\n    console.log('UPDATED!', this.rows[rowIndex][cell]);\n  }\nprocessAllFiles() {\n    this.importcsvService.processAllFiles().subscribe((res) => {\n       if(res.message == 'success'){\n          alert('All Files Processed Successfully');\n          this.getLogs();\n\n       }\n    }, error => {\n      this.warningMessage = \"Please Provide Valid Inputs!\";\n\n    }    \n    );\n}\n\n}\nclass FileSnippet {\n  constructor(public src: string, public file: File) {}\n}","import 'hammerjs';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { HttpModule } from '@angular/http';\nimport { CommonModule, DatePipe } from '@angular/common';\n\nimport { DemoMaterialModule } from '../demo-material-module';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { ChartsModule } from 'ng2-charts';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { ImportcsvRoutes } from './importcsv.routing';\nimport { ChartistModule } from 'ng-chartist';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { ImportcsvService } from './importcsv.service';\nimport { ImportcsvComponent } from './importcsv.component';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ImportcsvRoutes),\n    DemoMaterialModule,\n    HttpModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    CdkTableModule,\n    ChartistModule,\n    ChartsModule,\n    NgxChartsModule,\n    NgxDatatableModule,\n  ],\n  providers: [\n    ImportcsvService, DatePipe\n  ],\n  declarations: [ ImportcsvComponent ]\n})\nexport class ImportcsvModule { }","import { Routes } from '@angular/router';\n\nimport { ImportcsvComponent } from './importcsv.component';\n\nexport const ImportcsvRoutes: Routes = [\n  {\n    path: '',\n    component: ImportcsvComponent,\n    data: {\n      title: 'Importcsv'\n    }\n  }\n];\n","\nimport {map} from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { HttpClient } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { CookieService } from \"angular2-cookie/core\";\n\n\n@Injectable()\nexport class ImportcsvService {\n\n  constructor(private http: HttpClient,private _cookieService: CookieService){}\n\n\n  public uploadFile(file: File): Observable<string | any> {\n    const formData = new FormData();\n\n    formData.append('file', file);\n    formData.append('clinic_id', '1');\n    formData.append('user_id', '23');\n    formData.append('target', 'webroot/uploads/');\n    formData.append('file_input', 'file');\n    formData.append('token', this._cookieService.get(\"token\"));\n\n   // console.log(formData);\n  return this.http.post(\"http://localhost/jeeveanalytics/server/AccountingInvoicesAndReceipts/uploadFile\", formData)\n        .pipe(map((response: Response) => {\n                        return response;\n                    })\n        );\n  }\n\n   // Get Logs\n    getLogs(user_id = '23', clinic_id='1', token = this._cookieService.get(\"token\")): Observable<any> {\n        return this.http.get(\"http://localhost/jeeveanalytics/server/logs/getUploadedCsvLogs/23/1\", { })\n        .pipe(map((response: Response) => {\n                        return response;\n                    })\n        );\n    }\n   // Process All Files\n    processAllFiles(user_id = '23', clinic_id='1', token = this._cookieService.get(\"token\")): Observable<any> {\n        return this.http.get(\"http://localhost/jeeveanalytics/server/AccountingInvoicesAndReceipts/processAllCsv/23/1\", { })\n        .pipe(map((response: Response) => {\n                        return response;\n                    })\n        );\n    }\n}\n\n"],"sourceRoot":""}