# Node Image for docker on which code will execute
image: node:16.13.1	

# This is the stages / task to perfom in jobs
stages:
  - build
  - deploy
    
# This command is run before the execution of stages    
before_script:
  - npm install
  - npm audit fix --production

   # Make test Build
build_test: 
  stage: build
  script:
  - npm run build-test
  artifacts:
    paths:
    - dist
    expire_in: 1 day
  only: ['test']

# Deploy test Build
deploy_test:
  image: python:latest  
  stage: deploy
  before_script:
    - pip install awscli
    # install jq
    - wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    - chmod u+x /usr/bin/jq
  script:
    - echo "test - Update AWS Keys"
    - export AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY
    - echo "test - Deploy to S3"    
    - aws s3api put-public-access-block --bucket $TEST_S3  --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
    - aws s3 sync ./dist s3://$TEST_S3/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA} --acl=public-read --delete
    - aws s3api put-public-access-block --bucket $TEST_S3  --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
    # https://medium.com/build-succeeded/front-end-deployments-in-aws-with-dev-prod-promotion-support-with-full-ci-cd-pipeline-959f3ce1ceab
    - echo "test - Update Cloudfront Distribution to point to new deployment"
    - aws cloudfront get-distribution-config --id $TEST_CLOUDFRONT > dist.json
    - JQ_QUERY=".DistributionConfig.Origins.Items[0].OriginPath = \"/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA}\""
    - /usr/bin/jq "$JQ_QUERY" < dist.json > updated.json
    - CFDIST_ETAG=$(jq -r '.ETag' < dist.json)
    - /usr/bin/jq .DistributionConfig < updated.json > new-dist-config.json
    - cat new-dist-config.json
    - echo $CFDIST_ETAG
    - aws cloudfront update-distribution --id $TEST_CLOUDFRONT --distribution-config file://new-dist-config.json --if-match ${CFDIST_ETAG}
    - echo "test - Invalidate Cloudfront"
    - aws cloudfront create-invalidation --distribution-id $TEST_CLOUDFRONT --paths "/*"

  only: ['test']
  
  # Make Staging Build
build_staging: 
  stage: build
  script:
  - npm run build-staging
  artifacts:
    paths:
    - dist
    expire_in: 1 day
  only: ['staging']

# Deploy Staging Build
deploy_staging:
  image: python:latest  
  stage: deploy
  before_script:
    - pip install awscli 
    # install jq
    - wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    - chmod u+x /usr/bin/jq
  script:
    - echo "Staging - Update AWS Keys"
    - export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY
    - echo "Staging - Deploy to S3"    
    - aws s3api put-public-access-block --bucket $STAGING_S3  --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
    - aws s3 sync ./dist s3://$STAGING_S3/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA} --acl=public-read --delete
    - aws s3api put-public-access-block --bucket $STAGING_S3  --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
    - echo "staging - Update Cloudfront Distribution to point to new deployment"
    - aws cloudfront get-distribution-config --id $STAGING_CLOUDFRONT > dist.json
    - JQ_QUERY=".DistributionConfig.Origins.Items[0].OriginPath = \"/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA}\""
    - /usr/bin/jq "$JQ_QUERY" < dist.json > updated.json
    - CFDIST_ETAG=$(jq -r '.ETag' < dist.json)
    - /usr/bin/jq .DistributionConfig < updated.json > new-dist-config.json
    - cat new-dist-config.json
    - echo $CFDIST_ETAG
    - aws cloudfront update-distribution --id $STAGING_CLOUDFRONT --distribution-config file://new-dist-config.json --if-match ${CFDIST_ETAG}
    - echo "Staging - Invalidate Cloudfront"
    - aws cloudfront create-invalidation --distribution-id $STAGING_CLOUDFRONT --paths "/*"
  only: ['staging']

# Make Dev Build
build_dev: 
  stage: build
  script:
  - npm run build-dev
  artifacts:
    paths:
    - dist
    expire_in: 1 day
  only: ['design']

# Deploy Dev Build
deploy_dev:
  image: python:latest  
  stage: deploy
  before_script:
    - pip install awscli
    # install jq
    - wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    - chmod u+x /usr/bin/jq 
  script:
    - echo "Design - Update AWS Keys"
    - export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY
    - echo "Design - Deploy to S3"    
    - aws s3api put-public-access-block --bucket $STAGING_S3  --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
    - aws s3 sync ./dist s3://$STAGING_S3/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA} --acl=public-read --delete
    - aws s3api put-public-access-block --bucket $STAGING_S3  --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
    - echo "Design - Update Cloudfront Distribution to point to new deployment"
    - aws cloudfront get-distribution-config --id $STAGING_CLOUDFRONT > dist.json
    - JQ_QUERY=".DistributionConfig.Origins.Items[0].OriginPath = \"/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA}\""
    - /usr/bin/jq "$JQ_QUERY" < dist.json > updated.json
    - CFDIST_ETAG=$(jq -r '.ETag' < dist.json)
    - /usr/bin/jq .DistributionConfig < updated.json > new-dist-config.json
    - cat new-dist-config.json
    - echo $CFDIST_ETAG
    - aws cloudfront update-distribution --id $STAGING_CLOUDFRONT --distribution-config file://new-dist-config.json --if-match ${CFDIST_ETAG}
    - echo "Design - Invalidate Cloudfront"
    - aws cloudfront create-invalidation --distribution-id $STAGING_CLOUDFRONT --paths "/*"
  only: ['design']

# Make Pilot Build
build_pilot: 
  stage: build
  script:
  - npm run build-pilot
  artifacts:
    paths:
    - dist
    expire_in: 1 day
  only: ['pilot']

# Deploy Pilot Build
deploy_pilot:
  image: python:latest  
  stage: deploy
  before_script:
    - pip install awscli 
    # install jq
    - wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    - chmod u+x /usr/bin/jq 
  script:
    - echo "Pilot - Update AWS Keys"
    - export AWS_ACCESS_KEY_ID=$PILOT_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$PILOT_AWS_SECRET_ACCESS_KEY
    - echo "Pilot - Deploy to S3"    
    - aws s3api put-public-access-block --bucket $PILOT_S3  --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
    - aws s3 sync ./dist s3://$PILOT_S3/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA} --acl=public-read --delete
    - aws s3api put-public-access-block --bucket $PILOT_S3  --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
    - echo "Pilot - Update Cloudfront Distribution to point to new deployment"
    - aws cloudfront get-distribution-config --id $PILOT_CLOUDFRONT > dist.json
    - JQ_QUERY=".DistributionConfig.Origins.Items[0].OriginPath = \"/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA}\""
    - /usr/bin/jq "$JQ_QUERY" < dist.json > updated.json
    - CFDIST_ETAG=$(jq -r '.ETag' < dist.json)
    - /usr/bin/jq .DistributionConfig < updated.json > new-dist-config.json
    - cat new-dist-config.json
    - echo $CFDIST_ETAG
    - aws cloudfront update-distribution --id $PILOT_CLOUDFRONT --distribution-config file://new-dist-config.json --if-match ${CFDIST_ETAG}
    - echo "Pilot - Invalidate Cloudfront"
    - aws cloudfront create-invalidation --distribution-id $PILOT_CLOUDFRONT --paths "/*"
  only: ['pilot']

# Make Production Build
build_production: 
  stage: build
  script:
  - npm run build-prod
  artifacts:
    paths:
    - dist
    expire_in: 1 day
  only: ['production']

# Deploy Production Build
deploy_production:
  image: python:latest  
  stage: deploy
  before_script:
    - pip install awscli 
    # install jq
    - wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    - chmod u+x /usr/bin/jq 
  script:
    - echo "Production - Update AWS Keys"
    - export AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY
    - echo "Production - Deploy to S3"    
    - aws s3api put-public-access-block --bucket $PROD_S3  --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
    - aws s3 sync ./dist s3://$PROD_S3/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA} --acl=public-read --delete
    - aws s3api put-public-access-block --bucket $PROD_S3  --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
    - echo "Prod - Update Cloudfront Distribution to point to new deployment"
    - aws cloudfront get-distribution-config --id $PROD_CLOUDFRONT > dist.json
    - JQ_QUERY=".DistributionConfig.Origins.Items[0].OriginPath = \"/${CI_JOB_STARTED_AT}_${CI_COMMIT_SHORT_SHA}\""
    - /usr/bin/jq "$JQ_QUERY" < dist.json > updated.json
    - CFDIST_ETAG=$(jq -r '.ETag' < dist.json)
    - /usr/bin/jq .DistributionConfig < updated.json > new-dist-config.json
    - cat new-dist-config.json
    - echo $CFDIST_ETAG
    - aws cloudfront update-distribution --id $PROD_CLOUDFRONT --distribution-config file://new-dist-config.json --if-match ${CFDIST_ETAG}
    - echo "Production - Invalidate Cloudfront"
    - aws cloudfront create-invalidation --distribution-id $PROD_CLOUDFRONT --paths "/*"
  only: ['production']
