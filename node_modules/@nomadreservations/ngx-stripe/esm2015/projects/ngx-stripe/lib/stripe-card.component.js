import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest as observableCombineLatest } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
let StripeCardComponent = class StripeCardComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    ngOnInit() {
        const elements$ = this.elementsOptions$.asObservable().pipe(switchMap(options => {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }));
        observableCombineLatest(elements$, this.options$.asObservable().pipe(filter(options => Boolean(options)))).subscribe(([elements, options]) => {
            if (this.card) {
                this.element = elements.create('card', options);
                this.element.mount(this.card.nativeElement);
                this.element.on('change', changedCard => {
                    this.change.emit({
                        card: changedCard,
                        element: this.element
                    });
                    if (changedCard.complete) {
                        this.complete.emit({
                            card: changedCard,
                            element: this.element
                        });
                    }
                    if (changedCard.error) {
                        this.error.emit(changedCard.error);
                    }
                });
            }
        });
    }
    getCard() {
        return this.element;
    }
};
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "change", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "complete", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "error", void 0);
tslib_1.__decorate([
    ViewChild('card'),
    tslib_1.__metadata("design:type", ElementRef)
], StripeCardComponent.prototype, "card", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "options", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "elementsOptions", null);
StripeCardComponent = tslib_1.__decorate([
    Component({
        selector: 'ngx-stripe-card',
        template: `<div class="field" #card></div>`
    }),
    tslib_1.__metadata("design:paramtypes", [StripeService])
], StripeCardComponent);
export { StripeCardComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWNhcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5vbWFkcmVzZXJ2YXRpb25zL25neC1zdHJpcGUvcHJvamVjdHMvbmd4LXN0cmlwZS8iLCJzb3VyY2VzIjpbImxpYi9zdHJpcGUtY2FyZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RyxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsSUFBSSx1QkFBdUIsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUM3RixPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR25ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQU0xRCxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQXVCOUIsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFyQnpDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBeUMsQ0FBQztRQUVuRSxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQXlDLENBQUM7UUFFckUsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFTL0IsYUFBUSxHQUFHLElBQUksZUFBZSxDQUFpQixFQUFFLENBQUMsQ0FBQztRQU1uRCxxQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBa0IsRUFBRSxDQUFDLENBQUM7SUFFakIsQ0FBQztJQVhwRCxJQUFZLE9BQU8sQ0FBQyxTQUF5QjtRQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBSUQsSUFBVyxlQUFlLENBQUMsU0FBMEI7UUFDbkQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBS00sUUFBUTtRQUNiLE1BQU0sU0FBUyxHQUVYLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQzNDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNsQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3QztZQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ0YsdUJBQXVCLENBQ3JCLFNBQVMsRUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUN2RSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ2hELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBRTVDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7d0JBQ2YsSUFBSSxFQUFFLFdBQVc7d0JBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztxQkFDZixDQUFDLENBQUM7b0JBQ1YsSUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFO3dCQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQzs0QkFDakIsSUFBSSxFQUFFLFdBQVc7NEJBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzt5QkFDZixDQUFDLENBQUM7cUJBQ1g7b0JBQ0QsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFO3dCQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3BDO2dCQUNILENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Q0FDRixDQUFBO0FBaEVDO0lBREMsTUFBTSxFQUFFOzttREFDaUU7QUFFMUU7SUFEQyxNQUFNLEVBQUU7O3FEQUNtRTtBQUU1RTtJQURDLE1BQU0sRUFBRTs7a0RBQzhCO0FBR3ZDO0lBREMsU0FBUyxDQUFDLE1BQU0sQ0FBQztzQ0FDSCxVQUFVO2lEQUFDO0FBRzFCO0lBREMsS0FBSyxFQUFFOzs7a0RBR1A7QUFJRDtJQURDLEtBQUssRUFBRTs7OzBEQUdQO0FBcEJVLG1CQUFtQjtJQUovQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLFFBQVEsRUFBRSxpQ0FBaUM7S0FDNUMsQ0FBQzs2Q0F3Qm1DLGFBQWE7R0F2QnJDLG1CQUFtQixDQWtFL0I7U0FsRVksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QgYXMgb2JzZXJ2YWJsZUNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRWxlbWVudCBhcyBTdHJpcGVFbGVtZW50LCBFbGVtZW50T3B0aW9ucyB9IGZyb20gJy4vaW50ZXJmYWNlcy9lbGVtZW50JztcbmltcG9ydCB7IEVsZW1lbnRzLCBFbGVtZW50c09wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZXMvZWxlbWVudHMnO1xuaW1wb3J0IHsgU3RyaXBlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc3RyaXBlLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtc3RyaXBlLWNhcmQnLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJmaWVsZFwiICNjYXJkPjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgU3RyaXBlQ2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjx7IGNhcmQ6IGFueTsgZWxlbWVudDogU3RyaXBlRWxlbWVudCB9PigpO1xuICBAT3V0cHV0KClcbiAgcHVibGljIGNvbXBsZXRlID0gbmV3IEV2ZW50RW1pdHRlcjx7IGNhcmQ6IGFueTsgZWxlbWVudDogU3RyaXBlRWxlbWVudCB9PigpO1xuICBAT3V0cHV0KClcbiAgcHVibGljIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQFZpZXdDaGlsZCgnY2FyZCcpXG4gIHByaXZhdGUgY2FyZD86IEVsZW1lbnRSZWY7XG4gIHByaXZhdGUgZWxlbWVudD86IFN0cmlwZUVsZW1lbnQ7XG4gIEBJbnB1dCgpXG4gIHByaXZhdGUgc2V0IG9wdGlvbnMob3B0aW9uc0luOiBFbGVtZW50T3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyQubmV4dChvcHRpb25zSW4pO1xuICB9XG4gIHByaXZhdGUgb3B0aW9ucyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEVsZW1lbnRPcHRpb25zPih7fSk7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBlbGVtZW50c09wdGlvbnMob3B0aW9uc0luOiBFbGVtZW50c09wdGlvbnMpIHtcbiAgICB0aGlzLmVsZW1lbnRzT3B0aW9ucyQubmV4dChvcHRpb25zSW4pO1xuICB9XG4gIHByaXZhdGUgZWxlbWVudHNPcHRpb25zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RWxlbWVudHNPcHRpb25zPih7fSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdHJpcGVTZXJ2aWNlOiBTdHJpcGVTZXJ2aWNlKSB7fVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBlbGVtZW50cyQ6IE9ic2VydmFibGU8XG4gICAgICBFbGVtZW50c1xuICAgID4gPSB0aGlzLmVsZW1lbnRzT3B0aW9ucyQuYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcChvcHRpb25zID0+IHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwZVNlcnZpY2UuZWxlbWVudHMoKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgICBvYnNlcnZhYmxlQ29tYmluZUxhdGVzdChcbiAgICAgIGVsZW1lbnRzJCxcbiAgICAgIHRoaXMub3B0aW9ucyQuYXNPYnNlcnZhYmxlKCkucGlwZShmaWx0ZXIob3B0aW9ucyA9PiBCb29sZWFuKG9wdGlvbnMpKSlcbiAgICApLnN1YnNjcmliZSgoW2VsZW1lbnRzLCBvcHRpb25zXSkgPT4ge1xuICAgICAgaWYgKHRoaXMuY2FyZCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50cy5jcmVhdGUoJ2NhcmQnLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm1vdW50KHRoaXMuY2FyZC5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQub24oJ2NoYW5nZScsIGNoYW5nZWRDYXJkID0+IHtcbiAgICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KHtcbiAgICAgICAgICAgIGNhcmQ6IGNoYW5nZWRDYXJkLFxuICAgICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50XG4gICAgICAgICAgfSBhcyBhbnkpO1xuICAgICAgICAgIGlmIChjaGFuZ2VkQ2FyZC5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZS5lbWl0KHtcbiAgICAgICAgICAgICAgY2FyZDogY2hhbmdlZENhcmQsXG4gICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgfSBhcyBhbnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhbmdlZENhcmQuZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChjaGFuZ2VkQ2FyZC5lcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDYXJkKCk6IFN0cmlwZUVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==