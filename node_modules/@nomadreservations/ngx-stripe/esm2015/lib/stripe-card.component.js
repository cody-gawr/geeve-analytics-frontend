import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest as observableCombineLatest } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
let StripeCardComponent = class StripeCardComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    ngOnInit() {
        const elements$ = this.elementsOptions$.asObservable().pipe(switchMap(options => {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }));
        observableCombineLatest(elements$, this.options$.asObservable().pipe(filter(options => Boolean(options)))).subscribe(([elements, options]) => {
            if (this.card) {
                this.element = elements.create('card', options);
                this.element.mount(this.card.nativeElement);
                this.element.on('change', changedCard => {
                    this.change.emit({
                        card: changedCard,
                        element: this.element
                    });
                    if (changedCard.complete) {
                        this.complete.emit({
                            card: changedCard,
                            element: this.element
                        });
                    }
                    if (changedCard.error) {
                        this.error.emit(changedCard.error);
                    }
                });
            }
        });
    }
    getCard() {
        return this.element;
    }
};
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "change", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "complete", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "error", void 0);
tslib_1.__decorate([
    ViewChild('card'),
    tslib_1.__metadata("design:type", ElementRef)
], StripeCardComponent.prototype, "card", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "options", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "elementsOptions", null);
StripeCardComponent = tslib_1.__decorate([
    Component({
        selector: 'ngx-stripe-card',
        template: `<div class="field" #card></div>`
    }),
    tslib_1.__metadata("design:paramtypes", [StripeService])
], StripeCardComponent);
export { StripeCardComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWNhcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5vbWFkcmVzZXJ2YXRpb25zL25neC1zdHJpcGUvIiwic291cmNlcyI6WyJsaWIvc3RyaXBlLWNhcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLElBQUksdUJBQXVCLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDN0YsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUduRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFNMUQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUF1QjlCLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBckJ6QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQXlDLENBQUM7UUFFbkUsYUFBUSxHQUFHLElBQUksWUFBWSxFQUF5QyxDQUFDO1FBRXJFLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBUy9CLGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBaUIsRUFBRSxDQUFDLENBQUM7UUFNbkQscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBRWpCLENBQUM7SUFYcEQsSUFBWSxPQUFPLENBQUMsU0FBeUI7UUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUlELElBQVcsZUFBZSxDQUFDLFNBQTBCO1FBQ25ELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUtNLFFBQVE7UUFDYixNQUFNLFNBQVMsR0FFWCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUMzQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0M7WUFDRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUNGLHVCQUF1QixDQUNyQixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDdkUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDYixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUU1QyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO3dCQUNmLElBQUksRUFBRSxXQUFXO3dCQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87cUJBQ2YsQ0FBQyxDQUFDO29CQUNWLElBQUksV0FBVyxDQUFDLFFBQVEsRUFBRTt3QkFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7NEJBQ2pCLElBQUksRUFBRSxXQUFXOzRCQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87eUJBQ2YsQ0FBQyxDQUFDO3FCQUNYO29CQUNELElBQUksV0FBVyxDQUFDLEtBQUssRUFBRTt3QkFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUNwQztnQkFDSCxDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0NBQ0YsQ0FBQTtBQWhFQztJQURDLE1BQU0sRUFBRTs7bURBQ2lFO0FBRTFFO0lBREMsTUFBTSxFQUFFOztxREFDbUU7QUFFNUU7SUFEQyxNQUFNLEVBQUU7O2tEQUM4QjtBQUd2QztJQURDLFNBQVMsQ0FBQyxNQUFNLENBQUM7c0NBQ0gsVUFBVTtpREFBQztBQUcxQjtJQURDLEtBQUssRUFBRTs7O2tEQUdQO0FBSUQ7SUFEQyxLQUFLLEVBQUU7OzswREFHUDtBQXBCVSxtQkFBbUI7SUFKL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixRQUFRLEVBQUUsaUNBQWlDO0tBQzVDLENBQUM7NkNBd0JtQyxhQUFhO0dBdkJyQyxtQkFBbUIsQ0FrRS9CO1NBbEVZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0IGFzIG9ic2VydmFibGVDb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEVsZW1lbnQgYXMgU3RyaXBlRWxlbWVudCwgRWxlbWVudE9wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZXMvZWxlbWVudCc7XG5pbXBvcnQgeyBFbGVtZW50cywgRWxlbWVudHNPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL2VsZW1lbnRzJztcbmltcG9ydCB7IFN0cmlwZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3N0cmlwZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXN0cmlwZS1jYXJkJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwiZmllbGRcIiAjY2FyZD48L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIFN0cmlwZUNhcmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBAT3V0cHV0KClcbiAgcHVibGljIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8eyBjYXJkOiBhbnk7IGVsZW1lbnQ6IFN0cmlwZUVsZW1lbnQgfT4oKTtcbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBjb21wbGV0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8eyBjYXJkOiBhbnk7IGVsZW1lbnQ6IFN0cmlwZUVsZW1lbnQgfT4oKTtcbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBWaWV3Q2hpbGQoJ2NhcmQnKVxuICBwcml2YXRlIGNhcmQ/OiBFbGVtZW50UmVmO1xuICBwcml2YXRlIGVsZW1lbnQ/OiBTdHJpcGVFbGVtZW50O1xuICBASW5wdXQoKVxuICBwcml2YXRlIHNldCBvcHRpb25zKG9wdGlvbnNJbjogRWxlbWVudE9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMkLm5leHQob3B0aW9uc0luKTtcbiAgfVxuICBwcml2YXRlIG9wdGlvbnMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFbGVtZW50T3B0aW9ucz4oe30pO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgZWxlbWVudHNPcHRpb25zKG9wdGlvbnNJbjogRWxlbWVudHNPcHRpb25zKSB7XG4gICAgdGhpcy5lbGVtZW50c09wdGlvbnMkLm5leHQob3B0aW9uc0luKTtcbiAgfVxuICBwcml2YXRlIGVsZW1lbnRzT3B0aW9ucyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEVsZW1lbnRzT3B0aW9ucz4oe30pO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RyaXBlU2VydmljZTogU3RyaXBlU2VydmljZSkge31cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgZWxlbWVudHMkOiBPYnNlcnZhYmxlPFxuICAgICAgRWxlbWVudHNcbiAgICA+ID0gdGhpcy5lbGVtZW50c09wdGlvbnMkLmFzT2JzZXJ2YWJsZSgpLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAob3B0aW9ucyA9PiB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RyaXBlU2VydmljZS5lbGVtZW50cyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKCk7XG4gICAgICB9KVxuICAgICk7XG4gICAgb2JzZXJ2YWJsZUNvbWJpbmVMYXRlc3QoXG4gICAgICBlbGVtZW50cyQsXG4gICAgICB0aGlzLm9wdGlvbnMkLmFzT2JzZXJ2YWJsZSgpLnBpcGUoZmlsdGVyKG9wdGlvbnMgPT4gQm9vbGVhbihvcHRpb25zKSkpXG4gICAgKS5zdWJzY3JpYmUoKFtlbGVtZW50cywgb3B0aW9uc10pID0+IHtcbiAgICAgIGlmICh0aGlzLmNhcmQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudHMuY3JlYXRlKCdjYXJkJywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5tb3VudCh0aGlzLmNhcmQubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKCdjaGFuZ2UnLCBjaGFuZ2VkQ2FyZCA9PiB7XG4gICAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdCh7XG4gICAgICAgICAgICBjYXJkOiBjaGFuZ2VkQ2FyZCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudFxuICAgICAgICAgIH0gYXMgYW55KTtcbiAgICAgICAgICBpZiAoY2hhbmdlZENhcmQuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGUuZW1pdCh7XG4gICAgICAgICAgICAgIGNhcmQ6IGNoYW5nZWRDYXJkLFxuICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRcbiAgICAgICAgICAgIH0gYXMgYW55KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoYW5nZWRDYXJkLmVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoY2hhbmdlZENhcmQuZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2FyZCgpOiBTdHJpcGVFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICB9XG59XG4iXX0=