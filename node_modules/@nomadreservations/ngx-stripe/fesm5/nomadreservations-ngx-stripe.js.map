{"version":3,"file":"nomadreservations-ngx-stripe.js","sources":["ng://@nomadreservations/ngx-stripe/lib/interfaces/sources.ts","ng://@nomadreservations/ngx-stripe/lib/interfaces/stripe.ts","ng://@nomadreservations/ngx-stripe/lib/interfaces/token.ts","ng://@nomadreservations/ngx-stripe/lib/services/platform.service.ts","ng://@nomadreservations/ngx-stripe/lib/services/document-ref.service.ts","ng://@nomadreservations/ngx-stripe/lib/services/window-ref.service.ts","ng://@nomadreservations/ngx-stripe/lib/services/api-loader.service.ts","ng://@nomadreservations/ngx-stripe/lib/services/stripe.service.ts","ng://@nomadreservations/ngx-stripe/lib/stripe-card.component.ts","ng://@nomadreservations/ngx-stripe/lib/ngx-stripe.module.ts"],"sourcesContent":["import { Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    };\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type:\n    | 'card'\n    | 'three_d_secure'\n    | 'giropay'\n    | 'sepa_bit'\n    | 'ideal'\n    | 'sofort'\n    | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type?: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Elements, ElementsOptions } from './elements';\nimport { Element } from './element';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  Pii,\n  PiiData,\n  SetupIntentData, SetupIntentResult,\n} from './token';\nimport { SourceData, SourceResult, SourceParams } from './sources';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>(\n  'Stripe Publishable Key'\n);\nexport const STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(\n    account: BankAccount,\n    bankAccountData: BankAccountData\n  ): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  handleCardSetup(clientSecret: string, el: Element, cardSetupOptions?: SetupIntentData): Promise<SetupIntentResult>;\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Error } from './utils';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status:\n      | 'new'\n      | 'validated'\n      | 'verified'\n      | 'verification_failded'\n      | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name: string;\n  account_holder_type: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n\nexport function isBankAccountData(\n  bankAccountData: any\n): bankAccountData is BankAccountData {\n  return (\n    'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    'account_holder_name' in bankAccountData &&\n    'account_holder_type' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' ||\n      bankAccountData.account_holder_type === 'company')\n  );\n}\n\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n\nexport interface SetupIntent {\n  id: string;\n  object: 'setup_intent';\n  application?: string;\n  cancellation_reason?: 'abandoned' | 'requested_by_customer' | 'duplicate';\n  client_secret?: string;\n  created: number;\n  customer?: string;\n  description?: string;\n  last_setup_error?: Error;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  next_action: {\n    type: 'redirect_to_url' | 'use_stripe_sdk';\n    redirect_to_url?: {\n      return_url: string;\n      url: string;\n    };\n    use_stripe_sdk:  { [key: string]: any };\n  };\n  on_behalf_of?: string;\n  payment_method?: string;\n  payment_method_options?: { [key: string]: any };\n  status:\n    'requires_payment_method' |\n    'requires_confirmation' |\n    'requires_action' |\n    'processing' |\n    'canceled' |\n    'succeeded';\n  usage: 'on_session' | 'off_session';\n}\n\nexport interface SetupIntentResult {\n  setupIntent?: SetupIntent;\n  error?: Error;\n}\n\nexport interface SetupIntentData {\n  payment_method_data?: {\n    billing_details?: {\n      address?: {\n        city?: string\n        country?: string\n        line1?: string\n        line2?: string\n        postal_code?: string\n        state?: string\n      }\n      email?: string\n      name?: string\n      phone?: string\n    };\n  };\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\nexport interface IPlatformService {\n  isBrowser: boolean;\n  isServer: boolean;\n}\n\n@Injectable()\nexport class PlatformService implements IPlatformService {\n  constructor( @Inject(PLATFORM_ID) private platformId: any) { }\n\n  public get isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  public get isServer(): boolean {\n    return isPlatformServer(this.platformId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PlatformService } from './platform.service';\n\n@Injectable()\nexport class DocumentRef {\n  constructor(\n    private _platform: PlatformService\n  ) {}\n\n  public getNativeDocument(): Document {\n    if (this._platform.isBrowser) {\n      return document;\n    }\n    return {} as Document;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PlatformService } from './platform.service';\n\n@Injectable()\nexport class WindowRef {\n  constructor(\n    private _platform: PlatformService\n  ) {}\n\n  public getNativeWindow(): Window {\n    if (this._platform.isBrowser) {\n      return window;\n    }\n    return {} as Window;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { DocumentRef } from './document-ref.service';\nimport { PlatformService } from './platform.service';\nimport { WindowRef } from './window-ref.service';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\n\n@Injectable()\nexport class LazyStripeAPILoader {\n  private status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n\n  constructor(\n    private window: WindowRef,\n    private document: DocumentRef,\n    private _platform: PlatformService\n  ) {}\n\n  public asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n\n  public isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n\n  public load() {\n    if (this._platform.isServer) {\n      return;\n    }\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else {\n      if (!this.status.getValue().loaded && !this.status.getValue().loading) {\n        this.status.next({\n          ...this.status.getValue(),\n          loading: true\n        });\n\n        const script = this.document\n          .getNativeDocument()\n          .createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = 'https://js.stripe.com/v3/';\n\n        script.onload = () => {\n          this.status.next({\n            error: false,\n            loaded: true,\n            loading: false\n          });\n        };\n\n        script.onerror = () => {\n          this.status.next({\n            error: true,\n            loaded: false,\n            loading: false\n          });\n        };\n\n        this.document.getNativeDocument().body.appendChild(script);\n      }\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { from as observableFrom, Observable, ReplaySubject } from 'rxjs';\nimport { filter, map, publishLast, refCount, take } from 'rxjs/operators';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport { isSourceData, SourceData, SourceParams, SourceResult } from '../interfaces/sources';\nimport { Options, StripeJS, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/stripe';\nimport {\n  BankAccount,\n  BankAccountData,\n  CardDataOptions,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData,\n  Pii,\n  PiiData, SetupIntentData,\n  SetupIntentResult,\n  TokenResult\n} from '../interfaces/token';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\nimport { PlatformService } from './platform.service';\nimport { WindowRef } from './window-ref.service';\n\n@Injectable()\nexport class StripeService {\n  public stripeChanged$: ReplaySubject<StripeJS> = new ReplaySubject();\n  private stripe: StripeJS = {} as StripeJS;\n\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) private key: string,\n    @Inject(STRIPE_OPTIONS) private options: Options,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef,\n    private _platform: PlatformService\n  ) {\n    this.changeKey(this.key, this.options)\n      .pipe(take(1))\n      .subscribe(() => {});\n  }\n\n  public changeKey(\n    key: string,\n    options?: Options\n  ): Observable<StripeJS | undefined> {\n    const obs = this.loader.asStream().pipe(\n      filter((status: Status) => status.loaded === true),\n      map(() => {\n        if (!this.window.getNativeWindow()) {\n          return;\n        }\n        const Stripe = (this.window.getNativeWindow() as any).Stripe;\n        if (key) {\n          this.stripe = options\n            ? (Stripe(key, options) as StripeJS)\n            : (Stripe(key) as StripeJS);\n          this.stripeChanged$.next(this.stripe);\n        }\n        return this.stripe;\n      }),\n      publishLast(),\n      refCount()\n    );\n    obs.subscribe();\n    return obs;\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripeChanged$.pipe(map(() => this.stripe.elements(options)));\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    if (isBankAccount(a) && isBankAccountData(b)) {\n      return observableFrom(this.stripe.createToken(a, b));\n    } else if (isPii(a) && isPiiData(b)) {\n      return observableFrom(this.stripe.createToken(a, b));\n    } else {\n      return observableFrom(\n        this.stripe.createToken(a as Element, b as CardDataOptions | undefined)\n      );\n    }\n  }\n\n  public handleCardSetup(\n    clientSecret: string,\n    element: Element,\n    cardSetupOptions?: SetupIntentData | undefined\n  ): Observable<SetupIntentResult> {\n    return observableFrom(\n      this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions)\n    );\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    if (isSourceData(a)) {\n      return observableFrom(this.stripe.createSource(a as SourceData));\n    }\n    return observableFrom(this.stripe.createSource(a as Element, b));\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return observableFrom(this.stripe.retrieveSource(source));\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { BehaviorSubject, combineLatest as observableCombineLatest, Observable } from 'rxjs';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { Element as StripeElement, ElementOptions } from './interfaces/element';\nimport { Elements, ElementsOptions } from './interfaces/elements';\nimport { StripeService } from './services/stripe.service';\n\n@Component({\n  selector: 'ngx-stripe-card',\n  template: `<div class=\"field\" #card></div>`\n})\nexport class StripeCardComponent implements OnInit {\n  @Output()\n  public change = new EventEmitter<{ card: any; element: StripeElement }>();\n  @Output()\n  public complete = new EventEmitter<{ card: any; element: StripeElement }>();\n  @Output()\n  public error = new EventEmitter<any>();\n\n  @ViewChild('card')\n  private card?: ElementRef;\n  private element?: StripeElement;\n  @Input()\n  private set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\n  private options$ = new BehaviorSubject<ElementOptions>({});\n\n  @Input()\n  public set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\n  private elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n\n  constructor(private stripeService: StripeService) {}\n\n  public ngOnInit() {\n    const elements$: Observable<\n      Elements\n    > = this.elementsOptions$.asObservable().pipe(\n      switchMap(options => {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n        return this.stripeService.elements();\n      })\n    );\n    observableCombineLatest(\n      elements$,\n      this.options$.asObservable().pipe(filter(options => Boolean(options)))\n    ).subscribe(([elements, options]) => {\n      if (this.card) {\n        this.element = elements.create('card', options);\n        this.element.mount(this.card.nativeElement);\n\n        this.element.on('change', changedCard => {\n          this.change.emit({\n            card: changedCard,\n            element: this.element\n          } as any);\n          if (changedCard.complete) {\n            this.complete.emit({\n              card: changedCard,\n              element: this.element\n            } as any);\n          }\n          if (changedCard.error) {\n            this.error.emit(changedCard.error);\n          }\n        });\n      }\n    });\n  }\n\n  public getCard(): StripeElement | undefined {\n    return this.element;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Options, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from './interfaces/stripe';\nimport { LazyStripeAPILoader } from './services/api-loader.service';\nimport { DocumentRef } from './services/document-ref.service';\nimport { PlatformService } from './services/platform.service';\nimport { StripeService } from './services/stripe.service';\nimport { WindowRef } from './services/window-ref.service';\nimport { StripeCardComponent } from './stripe-card.component';\n\nexport interface NgxStripeModuleOptions {\n  publishableKey?: string;\n  options?: Options;\n}\n\n@NgModule({\n  declarations: [StripeCardComponent],\n  exports: [StripeCardComponent]\n})\nexport class NgxStripeModule {\n  public static forRoot( publishableKey: string, options?: Options ): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        PlatformService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"],"names":["tslib_1.__param","observableFrom","observableCombineLatest","tslib_1.__decorate"],"mappings":"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"}