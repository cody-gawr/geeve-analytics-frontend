import { InjectionToken, Injectable, Inject, PLATFORM_ID, Output, ViewChild, ElementRef, Input, Component, EventEmitter, NgModule } from '@angular/core';
import { __decorate, __param, __metadata, __assign, __read } from 'tslib';
import { BehaviorSubject, from, ReplaySubject, combineLatest } from 'rxjs';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { filter, map, publishLast, refCount, take, switchMap } from 'rxjs/operators';

function isSourceData(sourceData) {
    return 'type' in sourceData;
}

var STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
var STRIPE_OPTIONS = new InjectionToken('Stripe Options');

function isBankAccount(account) {
    return account === 'bank_account';
}
function isBankAccountData(bankAccountData) {
    return ('country' in bankAccountData &&
        'currency' in bankAccountData &&
        'routing_number' in bankAccountData &&
        'account_number' in bankAccountData &&
        'account_holder_name' in bankAccountData &&
        'account_holder_type' in bankAccountData &&
        (bankAccountData.account_holder_type === 'individual' ||
            bankAccountData.account_holder_type === 'company'));
}
function isPii(pii) {
    return pii === 'pii';
}
function isPiiData(piiData) {
    return 'personal_id_number' in piiData;
}

var PlatformService = /** @class */ (function () {
    function PlatformService(platformId) {
        this.platformId = platformId;
    }
    Object.defineProperty(PlatformService.prototype, "isBrowser", {
        get: function () {
            return isPlatformBrowser(this.platformId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformService.prototype, "isServer", {
        get: function () {
            return isPlatformServer(this.platformId);
        },
        enumerable: true,
        configurable: true
    });
    PlatformService = __decorate([
        Injectable(),
        __param(0, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [Object])
    ], PlatformService);
    return PlatformService;
}());

var DocumentRef = /** @class */ (function () {
    function DocumentRef(_platform) {
        this._platform = _platform;
    }
    DocumentRef.prototype.getNativeDocument = function () {
        if (this._platform.isBrowser) {
            return document;
        }
        return {};
    };
    DocumentRef = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [PlatformService])
    ], DocumentRef);
    return DocumentRef;
}());

var WindowRef = /** @class */ (function () {
    function WindowRef(_platform) {
        this._platform = _platform;
    }
    WindowRef.prototype.getNativeWindow = function () {
        if (this._platform.isBrowser) {
            return window;
        }
        return {};
    };
    WindowRef = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [PlatformService])
    ], WindowRef);
    return WindowRef;
}());

var LazyStripeAPILoader = /** @class */ (function () {
    function LazyStripeAPILoader(window, document, _platform) {
        this.window = window;
        this.document = document;
        this._platform = _platform;
        this.status = new BehaviorSubject({
            error: false,
            loaded: false,
            loading: false
        });
    }
    LazyStripeAPILoader.prototype.asStream = function () {
        this.load();
        return this.status.asObservable();
    };
    LazyStripeAPILoader.prototype.isReady = function () {
        return this.status.getValue().loaded;
    };
    LazyStripeAPILoader.prototype.load = function () {
        var _this = this;
        if (this._platform.isServer) {
            return;
        }
        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
            this.status.next({
                error: false,
                loaded: true,
                loading: false
            });
        }
        else {
            if (!this.status.getValue().loaded && !this.status.getValue().loading) {
                this.status.next(__assign({}, this.status.getValue(), { loading: true }));
                var script = this.document
                    .getNativeDocument()
                    .createElement('script');
                script.type = 'text/javascript';
                script.async = true;
                script.defer = true;
                script.src = 'https://js.stripe.com/v3/';
                script.onload = function () {
                    _this.status.next({
                        error: false,
                        loaded: true,
                        loading: false
                    });
                };
                script.onerror = function () {
                    _this.status.next({
                        error: true,
                        loaded: false,
                        loading: false
                    });
                };
                this.document.getNativeDocument().body.appendChild(script);
            }
        }
    };
    LazyStripeAPILoader = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [WindowRef,
            DocumentRef,
            PlatformService])
    ], LazyStripeAPILoader);
    return LazyStripeAPILoader;
}());

var StripeService = /** @class */ (function () {
    function StripeService(key, options, loader, window, _platform) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        this._platform = _platform;
        this.stripeChanged$ = new ReplaySubject();
        this.stripe = {};
        this.changeKey(this.key, this.options)
            .pipe(take(1))
            .subscribe(function () { });
    }
    StripeService.prototype.changeKey = function (key, options) {
        var _this = this;
        var obs = this.loader.asStream().pipe(filter(function (status) { return status.loaded === true; }), map(function () {
            if (!_this.window.getNativeWindow()) {
                return;
            }
            var Stripe = _this.window.getNativeWindow().Stripe;
            if (key) {
                _this.stripe = options
                    ? Stripe(key, options)
                    : Stripe(key);
                _this.stripeChanged$.next(_this.stripe);
            }
            return _this.stripe;
        }), publishLast(), refCount());
        obs.subscribe();
        return obs;
    };
    StripeService.prototype.elements = function (options) {
        var _this = this;
        return this.stripeChanged$.pipe(map(function () { return _this.stripe.elements(options); }));
    };
    StripeService.prototype.createToken = function (a, b) {
        if (isBankAccount(a) && isBankAccountData(b)) {
            return from(this.stripe.createToken(a, b));
        }
        else if (isPii(a) && isPiiData(b)) {
            return from(this.stripe.createToken(a, b));
        }
        else {
            return from(this.stripe.createToken(a, b));
        }
    };
    StripeService.prototype.handleCardSetup = function (clientSecret, element, cardSetupOptions) {
        return from(this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions));
    };
    StripeService.prototype.createSource = function (a, b) {
        if (isSourceData(a)) {
            return from(this.stripe.createSource(a));
        }
        return from(this.stripe.createSource(a, b));
    };
    StripeService.prototype.retrieveSource = function (source) {
        return from(this.stripe.retrieveSource(source));
    };
    StripeService = __decorate([
        Injectable(),
        __param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
        __param(1, Inject(STRIPE_OPTIONS)),
        __metadata("design:paramtypes", [String, Object, LazyStripeAPILoader,
            WindowRef,
            PlatformService])
    ], StripeService);
    return StripeService;
}());

var StripeCardComponent = /** @class */ (function () {
    function StripeCardComponent(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    Object.defineProperty(StripeCardComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    StripeCardComponent.prototype.ngOnInit = function () {
        var _this = this;
        var elements$ = this.elementsOptions$.asObservable().pipe(switchMap(function (options) {
            if (Object.keys(options).length > 0) {
                return _this.stripeService.elements(options);
            }
            return _this.stripeService.elements();
        }));
        combineLatest(elements$, this.options$.asObservable().pipe(filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
            var _b = __read(_a, 2), elements = _b[0], options = _b[1];
            if (_this.card) {
                _this.element = elements.create('card', options);
                _this.element.mount(_this.card.nativeElement);
                _this.element.on('change', function (changedCard) {
                    _this.change.emit({
                        card: changedCard,
                        element: _this.element
                    });
                    if (changedCard.complete) {
                        _this.complete.emit({
                            card: changedCard,
                            element: _this.element
                        });
                    }
                    if (changedCard.error) {
                        _this.error.emit(changedCard.error);
                    }
                });
            }
        });
    };
    StripeCardComponent.prototype.getCard = function () {
        return this.element;
    };
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StripeCardComponent.prototype, "change", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StripeCardComponent.prototype, "complete", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StripeCardComponent.prototype, "error", void 0);
    __decorate([
        ViewChild('card'),
        __metadata("design:type", ElementRef)
    ], StripeCardComponent.prototype, "card", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "options", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "elementsOptions", null);
    StripeCardComponent = __decorate([
        Component({
            selector: 'ngx-stripe-card',
            template: "<div class=\"field\" #card></div>"
        }),
        __metadata("design:paramtypes", [StripeService])
    ], StripeCardComponent);
    return StripeCardComponent;
}());

var NgxStripeModule = /** @class */ (function () {
    function NgxStripeModule() {
    }
    NgxStripeModule_1 = NgxStripeModule;
    NgxStripeModule.forRoot = function (publishableKey, options) {
        return {
            ngModule: NgxStripeModule_1,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                PlatformService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    };
    var NgxStripeModule_1;
    NgxStripeModule = NgxStripeModule_1 = __decorate([
        NgModule({
            declarations: [StripeCardComponent],
            exports: [StripeCardComponent]
        })
    ], NgxStripeModule);
    return NgxStripeModule;
}());

export { DocumentRef, LazyStripeAPILoader, NgxStripeModule, PlatformService, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY, StripeCardComponent, StripeService, WindowRef, isBankAccount, isBankAccountData, isPii, isPiiData, isSourceData };
//# sourceMappingURL=nomadreservations-ngx-stripe.js.map
