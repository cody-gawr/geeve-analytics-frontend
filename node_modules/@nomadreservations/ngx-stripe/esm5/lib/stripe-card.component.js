import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest as observableCombineLatest } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
var StripeCardComponent = /** @class */ (function () {
    function StripeCardComponent(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    Object.defineProperty(StripeCardComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    StripeCardComponent.prototype.ngOnInit = function () {
        var _this = this;
        var elements$ = this.elementsOptions$.asObservable().pipe(switchMap(function (options) {
            if (Object.keys(options).length > 0) {
                return _this.stripeService.elements(options);
            }
            return _this.stripeService.elements();
        }));
        observableCombineLatest(elements$, this.options$.asObservable().pipe(filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 2), elements = _b[0], options = _b[1];
            if (_this.card) {
                _this.element = elements.create('card', options);
                _this.element.mount(_this.card.nativeElement);
                _this.element.on('change', function (changedCard) {
                    _this.change.emit({
                        card: changedCard,
                        element: _this.element
                    });
                    if (changedCard.complete) {
                        _this.complete.emit({
                            card: changedCard,
                            element: _this.element
                        });
                    }
                    if (changedCard.error) {
                        _this.error.emit(changedCard.error);
                    }
                });
            }
        });
    };
    StripeCardComponent.prototype.getCard = function () {
        return this.element;
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "change", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "complete", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "error", void 0);
    tslib_1.__decorate([
        ViewChild('card'),
        tslib_1.__metadata("design:type", ElementRef)
    ], StripeCardComponent.prototype, "card", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "options", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "elementsOptions", null);
    StripeCardComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-stripe-card',
            template: "<div class=\"field\" #card></div>"
        }),
        tslib_1.__metadata("design:paramtypes", [StripeService])
    ], StripeCardComponent);
    return StripeCardComponent;
}());
export { StripeCardComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWNhcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5vbWFkcmVzZXJ2YXRpb25zL25neC1zdHJpcGUvIiwic291cmNlcyI6WyJsaWIvc3RyaXBlLWNhcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLElBQUksdUJBQXVCLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDN0YsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUduRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFNMUQ7SUF1QkUsNkJBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBckJ6QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQXlDLENBQUM7UUFFbkUsYUFBUSxHQUFHLElBQUksWUFBWSxFQUF5QyxDQUFDO1FBRXJFLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBUy9CLGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBaUIsRUFBRSxDQUFDLENBQUM7UUFNbkQscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBRWpCLENBQUM7SUFYcEQsc0JBQVksd0NBQU87YUFBbkIsVUFBb0IsU0FBeUI7WUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFJRCxzQkFBVyxnREFBZTthQUExQixVQUEyQixTQUEwQjtZQUNuRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7OztPQUFBO0lBS00sc0NBQVEsR0FBZjtRQUFBLGlCQW9DQztRQW5DQyxJQUFNLFNBQVMsR0FFWCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUMzQyxTQUFTLENBQUMsVUFBQSxPQUFPO1lBQ2YsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sS0FBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0M7WUFDRCxPQUFPLEtBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUNGLHVCQUF1QixDQUNyQixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFoQixDQUFnQixDQUFDLENBQUMsQ0FDdkUsQ0FBQyxTQUFTLENBQUMsVUFBQyxFQUFtQjtnQkFBbkIsMEJBQW1CLEVBQWxCLGdCQUFRLEVBQUUsZUFBTztZQUM3QixJQUFJLEtBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2IsS0FBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDaEQsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFFNUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQUEsV0FBVztvQkFDbkMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7d0JBQ2YsSUFBSSxFQUFFLFdBQVc7d0JBQ2pCLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTztxQkFDZixDQUFDLENBQUM7b0JBQ1YsSUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFO3dCQUN4QixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQzs0QkFDakIsSUFBSSxFQUFFLFdBQVc7NEJBQ2pCLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTzt5QkFDZixDQUFDLENBQUM7cUJBQ1g7b0JBQ0QsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFO3dCQUNyQixLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3BDO2dCQUNILENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxxQ0FBTyxHQUFkO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUEvREQ7UUFEQyxNQUFNLEVBQUU7O3VEQUNpRTtJQUUxRTtRQURDLE1BQU0sRUFBRTs7eURBQ21FO0lBRTVFO1FBREMsTUFBTSxFQUFFOztzREFDOEI7SUFHdkM7UUFEQyxTQUFTLENBQUMsTUFBTSxDQUFDOzBDQUNILFVBQVU7cURBQUM7SUFHMUI7UUFEQyxLQUFLLEVBQUU7OztzREFHUDtJQUlEO1FBREMsS0FBSyxFQUFFOzs7OERBR1A7SUFwQlUsbUJBQW1CO1FBSi9CLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsUUFBUSxFQUFFLG1DQUFpQztTQUM1QyxDQUFDO2lEQXdCbUMsYUFBYTtPQXZCckMsbUJBQW1CLENBa0UvQjtJQUFELDBCQUFDO0NBQUEsQUFsRUQsSUFrRUM7U0FsRVksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QgYXMgb2JzZXJ2YWJsZUNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRWxlbWVudCBhcyBTdHJpcGVFbGVtZW50LCBFbGVtZW50T3B0aW9ucyB9IGZyb20gJy4vaW50ZXJmYWNlcy9lbGVtZW50JztcbmltcG9ydCB7IEVsZW1lbnRzLCBFbGVtZW50c09wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZXMvZWxlbWVudHMnO1xuaW1wb3J0IHsgU3RyaXBlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc3RyaXBlLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtc3RyaXBlLWNhcmQnLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJmaWVsZFwiICNjYXJkPjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgU3RyaXBlQ2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjx7IGNhcmQ6IGFueTsgZWxlbWVudDogU3RyaXBlRWxlbWVudCB9PigpO1xuICBAT3V0cHV0KClcbiAgcHVibGljIGNvbXBsZXRlID0gbmV3IEV2ZW50RW1pdHRlcjx7IGNhcmQ6IGFueTsgZWxlbWVudDogU3RyaXBlRWxlbWVudCB9PigpO1xuICBAT3V0cHV0KClcbiAgcHVibGljIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQFZpZXdDaGlsZCgnY2FyZCcpXG4gIHByaXZhdGUgY2FyZD86IEVsZW1lbnRSZWY7XG4gIHByaXZhdGUgZWxlbWVudD86IFN0cmlwZUVsZW1lbnQ7XG4gIEBJbnB1dCgpXG4gIHByaXZhdGUgc2V0IG9wdGlvbnMob3B0aW9uc0luOiBFbGVtZW50T3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyQubmV4dChvcHRpb25zSW4pO1xuICB9XG4gIHByaXZhdGUgb3B0aW9ucyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEVsZW1lbnRPcHRpb25zPih7fSk7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBlbGVtZW50c09wdGlvbnMob3B0aW9uc0luOiBFbGVtZW50c09wdGlvbnMpIHtcbiAgICB0aGlzLmVsZW1lbnRzT3B0aW9ucyQubmV4dChvcHRpb25zSW4pO1xuICB9XG4gIHByaXZhdGUgZWxlbWVudHNPcHRpb25zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RWxlbWVudHNPcHRpb25zPih7fSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdHJpcGVTZXJ2aWNlOiBTdHJpcGVTZXJ2aWNlKSB7fVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBlbGVtZW50cyQ6IE9ic2VydmFibGU8XG4gICAgICBFbGVtZW50c1xuICAgID4gPSB0aGlzLmVsZW1lbnRzT3B0aW9ucyQuYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcChvcHRpb25zID0+IHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwZVNlcnZpY2UuZWxlbWVudHMoKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgICBvYnNlcnZhYmxlQ29tYmluZUxhdGVzdChcbiAgICAgIGVsZW1lbnRzJCxcbiAgICAgIHRoaXMub3B0aW9ucyQuYXNPYnNlcnZhYmxlKCkucGlwZShmaWx0ZXIob3B0aW9ucyA9PiBCb29sZWFuKG9wdGlvbnMpKSlcbiAgICApLnN1YnNjcmliZSgoW2VsZW1lbnRzLCBvcHRpb25zXSkgPT4ge1xuICAgICAgaWYgKHRoaXMuY2FyZCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50cy5jcmVhdGUoJ2NhcmQnLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm1vdW50KHRoaXMuY2FyZC5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQub24oJ2NoYW5nZScsIGNoYW5nZWRDYXJkID0+IHtcbiAgICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KHtcbiAgICAgICAgICAgIGNhcmQ6IGNoYW5nZWRDYXJkLFxuICAgICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50XG4gICAgICAgICAgfSBhcyBhbnkpO1xuICAgICAgICAgIGlmIChjaGFuZ2VkQ2FyZC5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZS5lbWl0KHtcbiAgICAgICAgICAgICAgY2FyZDogY2hhbmdlZENhcmQsXG4gICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgfSBhcyBhbnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhbmdlZENhcmQuZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChjaGFuZ2VkQ2FyZC5lcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDYXJkKCk6IFN0cmlwZUVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==