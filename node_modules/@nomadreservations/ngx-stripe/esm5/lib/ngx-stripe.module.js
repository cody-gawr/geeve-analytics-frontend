import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from './interfaces/stripe';
import { LazyStripeAPILoader } from './services/api-loader.service';
import { DocumentRef } from './services/document-ref.service';
import { PlatformService } from './services/platform.service';
import { StripeService } from './services/stripe.service';
import { WindowRef } from './services/window-ref.service';
import { StripeCardComponent } from './stripe-card.component';
var NgxStripeModule = /** @class */ (function () {
    function NgxStripeModule() {
    }
    NgxStripeModule_1 = NgxStripeModule;
    NgxStripeModule.forRoot = function (publishableKey, options) {
        return {
            ngModule: NgxStripeModule_1,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                PlatformService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    };
    var NgxStripeModule_1;
    NgxStripeModule = NgxStripeModule_1 = tslib_1.__decorate([
        NgModule({
            declarations: [StripeCardComponent],
            exports: [StripeCardComponent]
        })
    ], NgxStripeModule);
    return NgxStripeModule;
}());
export { NgxStripeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXN0cmlwZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abm9tYWRyZXNlcnZhdGlvbnMvbmd4LXN0cmlwZS8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtc3RyaXBlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFXLGNBQWMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQVc5RDtJQUFBO0lBcUJBLENBQUM7d0JBckJZLGVBQWU7SUFDWix1QkFBTyxHQUFyQixVQUF1QixjQUFzQixFQUFFLE9BQWlCO1FBQzlELE9BQU87WUFDTCxRQUFRLEVBQUUsaUJBQWU7WUFDekIsU0FBUyxFQUFFO2dCQUNULG1CQUFtQjtnQkFDbkIsYUFBYTtnQkFDYixlQUFlO2dCQUNmLFNBQVM7Z0JBQ1QsV0FBVztnQkFDWDtvQkFDRSxPQUFPLEVBQUUsc0JBQXNCO29CQUMvQixRQUFRLEVBQUUsY0FBYztpQkFDekI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGNBQWM7b0JBQ3ZCLFFBQVEsRUFBRSxPQUFPO2lCQUNsQjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O0lBcEJVLGVBQWU7UUFKM0IsUUFBUSxDQUFDO1lBQ1IsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUM7WUFDbkMsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUM7U0FDL0IsQ0FBQztPQUNXLGVBQWUsQ0FxQjNCO0lBQUQsc0JBQUM7Q0FBQSxBQXJCRCxJQXFCQztTQXJCWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9wdGlvbnMsIFNUUklQRV9PUFRJT05TLCBTVFJJUEVfUFVCTElTSEFCTEVfS0VZIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3N0cmlwZSc7XG5pbXBvcnQgeyBMYXp5U3RyaXBlQVBJTG9hZGVyIH0gZnJvbSAnLi9zZXJ2aWNlcy9hcGktbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRG9jdW1lbnRSZWYgfSBmcm9tICcuL3NlcnZpY2VzL2RvY3VtZW50LXJlZi5zZXJ2aWNlJztcbmltcG9ydCB7IFBsYXRmb3JtU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcGxhdGZvcm0uc2VydmljZSc7XG5pbXBvcnQgeyBTdHJpcGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9zdHJpcGUuc2VydmljZSc7XG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICcuL3NlcnZpY2VzL3dpbmRvdy1yZWYuc2VydmljZSc7XG5pbXBvcnQgeyBTdHJpcGVDYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9zdHJpcGUtY2FyZC5jb21wb25lbnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5neFN0cmlwZU1vZHVsZU9wdGlvbnMge1xuICBwdWJsaXNoYWJsZUtleT86IHN0cmluZztcbiAgb3B0aW9ucz86IE9wdGlvbnM7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1N0cmlwZUNhcmRDb21wb25lbnRdLFxuICBleHBvcnRzOiBbU3RyaXBlQ2FyZENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4U3RyaXBlTW9kdWxlIHtcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KCBwdWJsaXNoYWJsZUtleTogc3RyaW5nLCBvcHRpb25zPzogT3B0aW9ucyApOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neFN0cmlwZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBMYXp5U3RyaXBlQVBJTG9hZGVyLFxuICAgICAgICBTdHJpcGVTZXJ2aWNlLFxuICAgICAgICBQbGF0Zm9ybVNlcnZpY2UsXG4gICAgICAgIFdpbmRvd1JlZixcbiAgICAgICAgRG9jdW1lbnRSZWYsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBTVFJJUEVfUFVCTElTSEFCTEVfS0VZLFxuICAgICAgICAgIHVzZVZhbHVlOiBwdWJsaXNoYWJsZUtleVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogU1RSSVBFX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnNcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==