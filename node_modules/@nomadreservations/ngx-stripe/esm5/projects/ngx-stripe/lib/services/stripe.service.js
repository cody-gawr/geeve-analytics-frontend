import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { from as observableFrom, ReplaySubject } from 'rxjs';
import { filter, map, publishLast, refCount, take } from 'rxjs/operators';
import { isSourceData } from '../interfaces/sources';
import { STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/stripe';
import { isBankAccount, isBankAccountData, isPii, isPiiData } from '../interfaces/token';
import { LazyStripeAPILoader } from './api-loader.service';
import { PlatformService } from './platform.service';
import { WindowRef } from './window-ref.service';
var StripeService = /** @class */ (function () {
    function StripeService(key, options, loader, window, _platform) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        this._platform = _platform;
        this.stripeChanged$ = new ReplaySubject();
        this.stripe = {};
        this.changeKey(this.key, this.options)
            .pipe(take(1))
            .subscribe(function () { });
    }
    StripeService.prototype.changeKey = function (key, options) {
        var _this = this;
        var obs = this.loader.asStream().pipe(filter(function (status) { return status.loaded === true; }), map(function () {
            if (!_this.window.getNativeWindow()) {
                return;
            }
            var Stripe = _this.window.getNativeWindow().Stripe;
            if (key) {
                _this.stripe = options
                    ? Stripe(key, options)
                    : Stripe(key);
                _this.stripeChanged$.next(_this.stripe);
            }
            return _this.stripe;
        }), publishLast(), refCount());
        obs.subscribe();
        return obs;
    };
    StripeService.prototype.elements = function (options) {
        var _this = this;
        return this.stripeChanged$.pipe(map(function () { return _this.stripe.elements(options); }));
    };
    StripeService.prototype.createToken = function (a, b) {
        if (isBankAccount(a) && isBankAccountData(b)) {
            return observableFrom(this.stripe.createToken(a, b));
        }
        else if (isPii(a) && isPiiData(b)) {
            return observableFrom(this.stripe.createToken(a, b));
        }
        else {
            return observableFrom(this.stripe.createToken(a, b));
        }
    };
    StripeService.prototype.handleCardSetup = function (clientSecret, element, cardSetupOptions) {
        return observableFrom(this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions));
    };
    StripeService.prototype.createSource = function (a, b) {
        if (isSourceData(a)) {
            return observableFrom(this.stripe.createSource(a));
        }
        return observableFrom(this.stripe.createSource(a, b));
    };
    StripeService.prototype.retrieveSource = function (source) {
        return observableFrom(this.stripe.retrieveSource(source));
    };
    StripeService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
        tslib_1.__param(1, Inject(STRIPE_OPTIONS)),
        tslib_1.__metadata("design:paramtypes", [String, Object, LazyStripeAPILoader,
            WindowRef,
            PlatformService])
    ], StripeService);
    return StripeService;
}());
export { StripeService };
//# sourceMappingURL=data:application/json;base64,