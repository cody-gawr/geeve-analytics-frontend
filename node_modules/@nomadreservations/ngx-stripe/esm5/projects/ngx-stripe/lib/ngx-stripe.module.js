import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from './interfaces/stripe';
import { LazyStripeAPILoader } from './services/api-loader.service';
import { DocumentRef } from './services/document-ref.service';
import { PlatformService } from './services/platform.service';
import { StripeService } from './services/stripe.service';
import { WindowRef } from './services/window-ref.service';
import { StripeCardComponent } from './stripe-card.component';
var NgxStripeModule = /** @class */ (function () {
    function NgxStripeModule() {
    }
    NgxStripeModule_1 = NgxStripeModule;
    NgxStripeModule.forRoot = function (publishableKey, options) {
        return {
            ngModule: NgxStripeModule_1,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                PlatformService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    };
    var NgxStripeModule_1;
    NgxStripeModule = NgxStripeModule_1 = tslib_1.__decorate([
        NgModule({
            declarations: [StripeCardComponent],
            exports: [StripeCardComponent]
        })
    ], NgxStripeModule);
    return NgxStripeModule;
}());
export { NgxStripeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXN0cmlwZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abm9tYWRyZXNlcnZhdGlvbnMvbmd4LXN0cmlwZS9wcm9qZWN0cy9uZ3gtc3RyaXBlLyIsInNvdXJjZXMiOlsibGliL25neC1zdHJpcGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQVcsY0FBYyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBVzlEO0lBQUE7SUFxQkEsQ0FBQzt3QkFyQlksZUFBZTtJQUNaLHVCQUFPLEdBQXJCLFVBQXVCLGNBQXNCLEVBQUUsT0FBaUI7UUFDOUQsT0FBTztZQUNMLFFBQVEsRUFBRSxpQkFBZTtZQUN6QixTQUFTLEVBQUU7Z0JBQ1QsbUJBQW1CO2dCQUNuQixhQUFhO2dCQUNiLGVBQWU7Z0JBQ2YsU0FBUztnQkFDVCxXQUFXO2dCQUNYO29CQUNFLE9BQU8sRUFBRSxzQkFBc0I7b0JBQy9CLFFBQVEsRUFBRSxjQUFjO2lCQUN6QjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsY0FBYztvQkFDdkIsUUFBUSxFQUFFLE9BQU87aUJBQ2xCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7SUFwQlUsZUFBZTtRQUozQixRQUFRLENBQUM7WUFDUixZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztZQUNuQyxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztTQUMvQixDQUFDO09BQ1csZUFBZSxDQXFCM0I7SUFBRCxzQkFBQztDQUFBLEFBckJELElBcUJDO1NBckJZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3B0aW9ucywgU1RSSVBFX09QVElPTlMsIFNUUklQRV9QVUJMSVNIQUJMRV9LRVkgfSBmcm9tICcuL2ludGVyZmFjZXMvc3RyaXBlJztcbmltcG9ydCB7IExhenlTdHJpcGVBUElMb2FkZXIgfSBmcm9tICcuL3NlcnZpY2VzL2FwaS1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEb2N1bWVudFJlZiB9IGZyb20gJy4vc2VydmljZXMvZG9jdW1lbnQtcmVmLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxhdGZvcm1TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9wbGF0Zm9ybS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0cmlwZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3N0cmlwZS5zZXJ2aWNlJztcbmltcG9ydCB7IFdpbmRvd1JlZiB9IGZyb20gJy4vc2VydmljZXMvd2luZG93LXJlZi5zZXJ2aWNlJztcbmltcG9ydCB7IFN0cmlwZUNhcmRDb21wb25lbnQgfSBmcm9tICcuL3N0cmlwZS1jYXJkLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmd4U3RyaXBlTW9kdWxlT3B0aW9ucyB7XG4gIHB1Ymxpc2hhYmxlS2V5Pzogc3RyaW5nO1xuICBvcHRpb25zPzogT3B0aW9ucztcbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbU3RyaXBlQ2FyZENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtTdHJpcGVDYXJkQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hTdHJpcGVNb2R1bGUge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoIHB1Ymxpc2hhYmxlS2V5OiBzdHJpbmcsIG9wdGlvbnM/OiBPcHRpb25zICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4U3RyaXBlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIExhenlTdHJpcGVBUElMb2FkZXIsXG4gICAgICAgIFN0cmlwZVNlcnZpY2UsXG4gICAgICAgIFBsYXRmb3JtU2VydmljZSxcbiAgICAgICAgV2luZG93UmVmLFxuICAgICAgICBEb2N1bWVudFJlZixcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFNUUklQRV9QVUJMSVNIQUJMRV9LRVksXG4gICAgICAgICAgdXNlVmFsdWU6IHB1Ymxpc2hhYmxlS2V5XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBTVFJJUEVfT1BUSU9OUyxcbiAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9uc1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19