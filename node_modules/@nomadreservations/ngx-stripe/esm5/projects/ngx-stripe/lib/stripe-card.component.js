import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest as observableCombineLatest } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
var StripeCardComponent = /** @class */ (function () {
    function StripeCardComponent(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    Object.defineProperty(StripeCardComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    StripeCardComponent.prototype.ngOnInit = function () {
        var _this = this;
        var elements$ = this.elementsOptions$.asObservable().pipe(switchMap(function (options) {
            if (Object.keys(options).length > 0) {
                return _this.stripeService.elements(options);
            }
            return _this.stripeService.elements();
        }));
        observableCombineLatest(elements$, this.options$.asObservable().pipe(filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 2), elements = _b[0], options = _b[1];
            if (_this.card) {
                _this.element = elements.create('card', options);
                _this.element.mount(_this.card.nativeElement);
                _this.element.on('change', function (changedCard) {
                    _this.change.emit({
                        card: changedCard,
                        element: _this.element
                    });
                    if (changedCard.complete) {
                        _this.complete.emit({
                            card: changedCard,
                            element: _this.element
                        });
                    }
                    if (changedCard.error) {
                        _this.error.emit(changedCard.error);
                    }
                });
            }
        });
    };
    StripeCardComponent.prototype.getCard = function () {
        return this.element;
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "change", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "complete", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "error", void 0);
    tslib_1.__decorate([
        ViewChild('card'),
        tslib_1.__metadata("design:type", ElementRef)
    ], StripeCardComponent.prototype, "card", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "options", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "elementsOptions", null);
    StripeCardComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-stripe-card',
            template: "<div class=\"field\" #card></div>"
        }),
        tslib_1.__metadata("design:paramtypes", [StripeService])
    ], StripeCardComponent);
    return StripeCardComponent;
}());
export { StripeCardComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWNhcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5vbWFkcmVzZXJ2YXRpb25zL25neC1zdHJpcGUvcHJvamVjdHMvbmd4LXN0cmlwZS8iLCJzb3VyY2VzIjpbImxpYi9zdHJpcGUtY2FyZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RyxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsSUFBSSx1QkFBdUIsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUM3RixPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR25ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQU0xRDtJQXVCRSw2QkFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFyQnpDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBeUMsQ0FBQztRQUVuRSxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQXlDLENBQUM7UUFFckUsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFTL0IsYUFBUSxHQUFHLElBQUksZUFBZSxDQUFpQixFQUFFLENBQUMsQ0FBQztRQU1uRCxxQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBa0IsRUFBRSxDQUFDLENBQUM7SUFFakIsQ0FBQztJQVhwRCxzQkFBWSx3Q0FBTzthQUFuQixVQUFvQixTQUF5QjtZQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNoQyxDQUFDOzs7T0FBQTtJQUlELHNCQUFXLGdEQUFlO2FBQTFCLFVBQTJCLFNBQTBCO1lBQ25ELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFLTSxzQ0FBUSxHQUFmO1FBQUEsaUJBb0NDO1FBbkNDLElBQU0sU0FBUyxHQUVYLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQzNDLFNBQVMsQ0FBQyxVQUFBLE9BQU87WUFDZixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxLQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3QztZQUNELE9BQU8sS0FBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ0YsdUJBQXVCLENBQ3JCLFNBQVMsRUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQWhCLENBQWdCLENBQUMsQ0FBQyxDQUN2RSxDQUFDLFNBQVMsQ0FBQyxVQUFDLEVBQW1CO2dCQUFuQiwwQkFBbUIsRUFBbEIsZ0JBQVEsRUFBRSxlQUFPO1lBQzdCLElBQUksS0FBSSxDQUFDLElBQUksRUFBRTtnQkFDYixLQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUNoRCxLQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUU1QyxLQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsVUFBQSxXQUFXO29CQUNuQyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQzt3QkFDZixJQUFJLEVBQUUsV0FBVzt3QkFDakIsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPO3FCQUNmLENBQUMsQ0FBQztvQkFDVixJQUFJLFdBQVcsQ0FBQyxRQUFRLEVBQUU7d0JBQ3hCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDOzRCQUNqQixJQUFJLEVBQUUsV0FBVzs0QkFDakIsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPO3lCQUNmLENBQUMsQ0FBQztxQkFDWDtvQkFDRCxJQUFJLFdBQVcsQ0FBQyxLQUFLLEVBQUU7d0JBQ3JCLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztxQkFDcEM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLHFDQUFPLEdBQWQ7UUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQS9ERDtRQURDLE1BQU0sRUFBRTs7dURBQ2lFO0lBRTFFO1FBREMsTUFBTSxFQUFFOzt5REFDbUU7SUFFNUU7UUFEQyxNQUFNLEVBQUU7O3NEQUM4QjtJQUd2QztRQURDLFNBQVMsQ0FBQyxNQUFNLENBQUM7MENBQ0gsVUFBVTtxREFBQztJQUcxQjtRQURDLEtBQUssRUFBRTs7O3NEQUdQO0lBSUQ7UUFEQyxLQUFLLEVBQUU7Ozs4REFHUDtJQXBCVSxtQkFBbUI7UUFKL0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixRQUFRLEVBQUUsbUNBQWlDO1NBQzVDLENBQUM7aURBd0JtQyxhQUFhO09BdkJyQyxtQkFBbUIsQ0FrRS9CO0lBQUQsMEJBQUM7Q0FBQSxBQWxFRCxJQWtFQztTQWxFWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCBhcyBvYnNlcnZhYmxlQ29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBFbGVtZW50IGFzIFN0cmlwZUVsZW1lbnQsIEVsZW1lbnRPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL2VsZW1lbnQnO1xuaW1wb3J0IHsgRWxlbWVudHMsIEVsZW1lbnRzT3B0aW9ucyB9IGZyb20gJy4vaW50ZXJmYWNlcy9lbGVtZW50cyc7XG5pbXBvcnQgeyBTdHJpcGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9zdHJpcGUuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1zdHJpcGUtY2FyZCcsXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz1cImZpZWxkXCIgI2NhcmQ+PC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBTdHJpcGVDYXJkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHsgY2FyZDogYW55OyBlbGVtZW50OiBTdHJpcGVFbGVtZW50IH0+KCk7XG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgY29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyPHsgY2FyZDogYW55OyBlbGVtZW50OiBTdHJpcGVFbGVtZW50IH0+KCk7XG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBAVmlld0NoaWxkKCdjYXJkJylcbiAgcHJpdmF0ZSBjYXJkPzogRWxlbWVudFJlZjtcbiAgcHJpdmF0ZSBlbGVtZW50PzogU3RyaXBlRWxlbWVudDtcbiAgQElucHV0KClcbiAgcHJpdmF0ZSBzZXQgb3B0aW9ucyhvcHRpb25zSW46IEVsZW1lbnRPcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zJC5uZXh0KG9wdGlvbnNJbik7XG4gIH1cbiAgcHJpdmF0ZSBvcHRpb25zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RWxlbWVudE9wdGlvbnM+KHt9KTtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGVsZW1lbnRzT3B0aW9ucyhvcHRpb25zSW46IEVsZW1lbnRzT3B0aW9ucykge1xuICAgIHRoaXMuZWxlbWVudHNPcHRpb25zJC5uZXh0KG9wdGlvbnNJbik7XG4gIH1cbiAgcHJpdmF0ZSBlbGVtZW50c09wdGlvbnMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFbGVtZW50c09wdGlvbnM+KHt9KTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZVNlcnZpY2U6IFN0cmlwZVNlcnZpY2UpIHt9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIGNvbnN0IGVsZW1lbnRzJDogT2JzZXJ2YWJsZTxcbiAgICAgIEVsZW1lbnRzXG4gICAgPiA9IHRoaXMuZWxlbWVudHNPcHRpb25zJC5hc09ic2VydmFibGUoKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKG9wdGlvbnMgPT4ge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0cmlwZVNlcnZpY2UuZWxlbWVudHMob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaXBlU2VydmljZS5lbGVtZW50cygpO1xuICAgICAgfSlcbiAgICApO1xuICAgIG9ic2VydmFibGVDb21iaW5lTGF0ZXN0KFxuICAgICAgZWxlbWVudHMkLFxuICAgICAgdGhpcy5vcHRpb25zJC5hc09ic2VydmFibGUoKS5waXBlKGZpbHRlcihvcHRpb25zID0+IEJvb2xlYW4ob3B0aW9ucykpKVxuICAgICkuc3Vic2NyaWJlKChbZWxlbWVudHMsIG9wdGlvbnNdKSA9PiB7XG4gICAgICBpZiAodGhpcy5jYXJkKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRzLmNyZWF0ZSgnY2FyZCcsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVsZW1lbnQubW91bnQodGhpcy5jYXJkLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbignY2hhbmdlJywgY2hhbmdlZENhcmQgPT4ge1xuICAgICAgICAgIHRoaXMuY2hhbmdlLmVtaXQoe1xuICAgICAgICAgICAgY2FyZDogY2hhbmdlZENhcmQsXG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRcbiAgICAgICAgICB9IGFzIGFueSk7XG4gICAgICAgICAgaWYgKGNoYW5nZWRDYXJkLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlLmVtaXQoe1xuICAgICAgICAgICAgICBjYXJkOiBjaGFuZ2VkQ2FyZCxcbiAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50XG4gICAgICAgICAgICB9IGFzIGFueSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGFuZ2VkQ2FyZC5lcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGNoYW5nZWRDYXJkLmVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldENhcmQoKTogU3RyaXBlRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgfVxufVxuIl19