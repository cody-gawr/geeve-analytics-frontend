import { InjectionToken, Injectable, Inject, PLATFORM_ID, EventEmitter, Output, ViewChild, ElementRef, Input, Component, NgModule } from '@angular/core';
import { __decorate, __param, __metadata } from 'tslib';
import { BehaviorSubject, ReplaySubject, from, combineLatest } from 'rxjs';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { take, filter, map, publishLast, refCount, switchMap } from 'rxjs/operators';

function isSourceData(sourceData) {
    return 'type' in sourceData;
}

const STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
const STRIPE_OPTIONS = new InjectionToken('Stripe Options');

function isBankAccount(account) {
    return account === 'bank_account';
}
function isBankAccountData(bankAccountData) {
    return ('country' in bankAccountData &&
        'currency' in bankAccountData &&
        'routing_number' in bankAccountData &&
        'account_number' in bankAccountData &&
        'account_holder_name' in bankAccountData &&
        'account_holder_type' in bankAccountData &&
        (bankAccountData.account_holder_type === 'individual' ||
            bankAccountData.account_holder_type === 'company'));
}
function isPii(pii) {
    return pii === 'pii';
}
function isPiiData(piiData) {
    return 'personal_id_number' in piiData;
}

let PlatformService = class PlatformService {
    constructor(platformId) {
        this.platformId = platformId;
    }
    get isBrowser() {
        return isPlatformBrowser(this.platformId);
    }
    get isServer() {
        return isPlatformServer(this.platformId);
    }
};
PlatformService = __decorate([
    Injectable(),
    __param(0, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [Object])
], PlatformService);

let DocumentRef = class DocumentRef {
    constructor(_platform) {
        this._platform = _platform;
    }
    getNativeDocument() {
        if (this._platform.isBrowser) {
            return document;
        }
        return {};
    }
};
DocumentRef = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [PlatformService])
], DocumentRef);

let WindowRef = class WindowRef {
    constructor(_platform) {
        this._platform = _platform;
    }
    getNativeWindow() {
        if (this._platform.isBrowser) {
            return window;
        }
        return {};
    }
};
WindowRef = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [PlatformService])
], WindowRef);

let LazyStripeAPILoader = class LazyStripeAPILoader {
    constructor(window, document, _platform) {
        this.window = window;
        this.document = document;
        this._platform = _platform;
        this.status = new BehaviorSubject({
            error: false,
            loaded: false,
            loading: false
        });
    }
    asStream() {
        this.load();
        return this.status.asObservable();
    }
    isReady() {
        return this.status.getValue().loaded;
    }
    load() {
        if (this._platform.isServer) {
            return;
        }
        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
            this.status.next({
                error: false,
                loaded: true,
                loading: false
            });
        }
        else {
            if (!this.status.getValue().loaded && !this.status.getValue().loading) {
                this.status.next(Object.assign({}, this.status.getValue(), { loading: true }));
                const script = this.document
                    .getNativeDocument()
                    .createElement('script');
                script.type = 'text/javascript';
                script.async = true;
                script.defer = true;
                script.src = 'https://js.stripe.com/v3/';
                script.onload = () => {
                    this.status.next({
                        error: false,
                        loaded: true,
                        loading: false
                    });
                };
                script.onerror = () => {
                    this.status.next({
                        error: true,
                        loaded: false,
                        loading: false
                    });
                };
                this.document.getNativeDocument().body.appendChild(script);
            }
        }
    }
};
LazyStripeAPILoader = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [WindowRef,
        DocumentRef,
        PlatformService])
], LazyStripeAPILoader);

let StripeService = class StripeService {
    constructor(key, options, loader, window, _platform) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        this._platform = _platform;
        this.stripeChanged$ = new ReplaySubject();
        this.stripe = {};
        this.changeKey(this.key, this.options)
            .pipe(take(1))
            .subscribe(() => { });
    }
    changeKey(key, options) {
        const obs = this.loader.asStream().pipe(filter((status) => status.loaded === true), map(() => {
            if (!this.window.getNativeWindow()) {
                return;
            }
            const Stripe = this.window.getNativeWindow().Stripe;
            if (key) {
                this.stripe = options
                    ? Stripe(key, options)
                    : Stripe(key);
                this.stripeChanged$.next(this.stripe);
            }
            return this.stripe;
        }), publishLast(), refCount());
        obs.subscribe();
        return obs;
    }
    elements(options) {
        return this.stripeChanged$.pipe(map(() => this.stripe.elements(options)));
    }
    createToken(a, b) {
        if (isBankAccount(a) && isBankAccountData(b)) {
            return from(this.stripe.createToken(a, b));
        }
        else if (isPii(a) && isPiiData(b)) {
            return from(this.stripe.createToken(a, b));
        }
        else {
            return from(this.stripe.createToken(a, b));
        }
    }
    handleCardSetup(clientSecret, element, cardSetupOptions) {
        return from(this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions));
    }
    createSource(a, b) {
        if (isSourceData(a)) {
            return from(this.stripe.createSource(a));
        }
        return from(this.stripe.createSource(a, b));
    }
    retrieveSource(source) {
        return from(this.stripe.retrieveSource(source));
    }
};
StripeService = __decorate([
    Injectable(),
    __param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
    __param(1, Inject(STRIPE_OPTIONS)),
    __metadata("design:paramtypes", [String, Object, LazyStripeAPILoader,
        WindowRef,
        PlatformService])
], StripeService);

let StripeCardComponent = class StripeCardComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    ngOnInit() {
        const elements$ = this.elementsOptions$.asObservable().pipe(switchMap(options => {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }));
        combineLatest(elements$, this.options$.asObservable().pipe(filter(options => Boolean(options)))).subscribe(([elements, options]) => {
            if (this.card) {
                this.element = elements.create('card', options);
                this.element.mount(this.card.nativeElement);
                this.element.on('change', changedCard => {
                    this.change.emit({
                        card: changedCard,
                        element: this.element
                    });
                    if (changedCard.complete) {
                        this.complete.emit({
                            card: changedCard,
                            element: this.element
                        });
                    }
                    if (changedCard.error) {
                        this.error.emit(changedCard.error);
                    }
                });
            }
        });
    }
    getCard() {
        return this.element;
    }
};
__decorate([
    Output(),
    __metadata("design:type", Object)
], StripeCardComponent.prototype, "change", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], StripeCardComponent.prototype, "complete", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], StripeCardComponent.prototype, "error", void 0);
__decorate([
    ViewChild('card'),
    __metadata("design:type", ElementRef)
], StripeCardComponent.prototype, "card", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "options", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "elementsOptions", null);
StripeCardComponent = __decorate([
    Component({
        selector: 'ngx-stripe-card',
        template: `<div class="field" #card></div>`
    }),
    __metadata("design:paramtypes", [StripeService])
], StripeCardComponent);

var NgxStripeModule_1;
let NgxStripeModule = NgxStripeModule_1 = class NgxStripeModule {
    static forRoot(publishableKey, options) {
        return {
            ngModule: NgxStripeModule_1,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                PlatformService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    }
};
NgxStripeModule = NgxStripeModule_1 = __decorate([
    NgModule({
        declarations: [StripeCardComponent],
        exports: [StripeCardComponent]
    })
], NgxStripeModule);

export { DocumentRef, LazyStripeAPILoader, NgxStripeModule, PlatformService, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY, StripeCardComponent, StripeService, WindowRef, isBankAccount, isBankAccountData, isPii, isPiiData, isSourceData };
//# sourceMappingURL=nomadreservations-ngx-stripe.js.map
