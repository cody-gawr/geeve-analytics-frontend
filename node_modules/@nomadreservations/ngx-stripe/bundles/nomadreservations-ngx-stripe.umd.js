(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@nomadreservations/ngx-stripe', ['exports', '@angular/core', 'rxjs', '@angular/common', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.nomadreservations = global.nomadreservations || {}, global.nomadreservations['ngx-stripe'] = {}), global.ng.core, global.rxjs, global.ng.common, global.rxjs.operators));
}(this, function (exports, core, rxjs, common, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function isSourceData(sourceData) {
        return 'type' in sourceData;
    }

    var STRIPE_PUBLISHABLE_KEY = new core.InjectionToken('Stripe Publishable Key');
    var STRIPE_OPTIONS = new core.InjectionToken('Stripe Options');

    function isBankAccount(account) {
        return account === 'bank_account';
    }
    function isBankAccountData(bankAccountData) {
        return ('country' in bankAccountData &&
            'currency' in bankAccountData &&
            'routing_number' in bankAccountData &&
            'account_number' in bankAccountData &&
            'account_holder_name' in bankAccountData &&
            'account_holder_type' in bankAccountData &&
            (bankAccountData.account_holder_type === 'individual' ||
                bankAccountData.account_holder_type === 'company'));
    }
    function isPii(pii) {
        return pii === 'pii';
    }
    function isPiiData(piiData) {
        return 'personal_id_number' in piiData;
    }

    var PlatformService = /** @class */ (function () {
        function PlatformService(platformId) {
            this.platformId = platformId;
        }
        Object.defineProperty(PlatformService.prototype, "isBrowser", {
            get: function () {
                return common.isPlatformBrowser(this.platformId);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformService.prototype, "isServer", {
            get: function () {
                return common.isPlatformServer(this.platformId);
            },
            enumerable: true,
            configurable: true
        });
        PlatformService = __decorate([
            core.Injectable(),
            __param(0, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [Object])
        ], PlatformService);
        return PlatformService;
    }());

    var DocumentRef = /** @class */ (function () {
        function DocumentRef(_platform) {
            this._platform = _platform;
        }
        DocumentRef.prototype.getNativeDocument = function () {
            if (this._platform.isBrowser) {
                return document;
            }
            return {};
        };
        DocumentRef = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [PlatformService])
        ], DocumentRef);
        return DocumentRef;
    }());

    var WindowRef = /** @class */ (function () {
        function WindowRef(_platform) {
            this._platform = _platform;
        }
        WindowRef.prototype.getNativeWindow = function () {
            if (this._platform.isBrowser) {
                return window;
            }
            return {};
        };
        WindowRef = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [PlatformService])
        ], WindowRef);
        return WindowRef;
    }());

    var LazyStripeAPILoader = /** @class */ (function () {
        function LazyStripeAPILoader(window, document, _platform) {
            this.window = window;
            this.document = document;
            this._platform = _platform;
            this.status = new rxjs.BehaviorSubject({
                error: false,
                loaded: false,
                loading: false
            });
        }
        LazyStripeAPILoader.prototype.asStream = function () {
            this.load();
            return this.status.asObservable();
        };
        LazyStripeAPILoader.prototype.isReady = function () {
            return this.status.getValue().loaded;
        };
        LazyStripeAPILoader.prototype.load = function () {
            var _this = this;
            if (this._platform.isServer) {
                return;
            }
            if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
                this.status.next({
                    error: false,
                    loaded: true,
                    loading: false
                });
            }
            else {
                if (!this.status.getValue().loaded && !this.status.getValue().loading) {
                    this.status.next(__assign({}, this.status.getValue(), { loading: true }));
                    var script = this.document
                        .getNativeDocument()
                        .createElement('script');
                    script.type = 'text/javascript';
                    script.async = true;
                    script.defer = true;
                    script.src = 'https://js.stripe.com/v3/';
                    script.onload = function () {
                        _this.status.next({
                            error: false,
                            loaded: true,
                            loading: false
                        });
                    };
                    script.onerror = function () {
                        _this.status.next({
                            error: true,
                            loaded: false,
                            loading: false
                        });
                    };
                    this.document.getNativeDocument().body.appendChild(script);
                }
            }
        };
        LazyStripeAPILoader = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [WindowRef,
                DocumentRef,
                PlatformService])
        ], LazyStripeAPILoader);
        return LazyStripeAPILoader;
    }());

    var StripeService = /** @class */ (function () {
        function StripeService(key, options, loader, window, _platform) {
            this.key = key;
            this.options = options;
            this.loader = loader;
            this.window = window;
            this._platform = _platform;
            this.stripeChanged$ = new rxjs.ReplaySubject();
            this.stripe = {};
            this.changeKey(this.key, this.options)
                .pipe(operators.take(1))
                .subscribe(function () { });
        }
        StripeService.prototype.changeKey = function (key, options) {
            var _this = this;
            var obs = this.loader.asStream().pipe(operators.filter(function (status) { return status.loaded === true; }), operators.map(function () {
                if (!_this.window.getNativeWindow()) {
                    return;
                }
                var Stripe = _this.window.getNativeWindow().Stripe;
                if (key) {
                    _this.stripe = options
                        ? Stripe(key, options)
                        : Stripe(key);
                    _this.stripeChanged$.next(_this.stripe);
                }
                return _this.stripe;
            }), operators.publishLast(), operators.refCount());
            obs.subscribe();
            return obs;
        };
        StripeService.prototype.elements = function (options) {
            var _this = this;
            return this.stripeChanged$.pipe(operators.map(function () { return _this.stripe.elements(options); }));
        };
        StripeService.prototype.createToken = function (a, b) {
            if (isBankAccount(a) && isBankAccountData(b)) {
                return rxjs.from(this.stripe.createToken(a, b));
            }
            else if (isPii(a) && isPiiData(b)) {
                return rxjs.from(this.stripe.createToken(a, b));
            }
            else {
                return rxjs.from(this.stripe.createToken(a, b));
            }
        };
        StripeService.prototype.handleCardSetup = function (clientSecret, element, cardSetupOptions) {
            return rxjs.from(this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions));
        };
        StripeService.prototype.createSource = function (a, b) {
            if (isSourceData(a)) {
                return rxjs.from(this.stripe.createSource(a));
            }
            return rxjs.from(this.stripe.createSource(a, b));
        };
        StripeService.prototype.retrieveSource = function (source) {
            return rxjs.from(this.stripe.retrieveSource(source));
        };
        StripeService = __decorate([
            core.Injectable(),
            __param(0, core.Inject(STRIPE_PUBLISHABLE_KEY)),
            __param(1, core.Inject(STRIPE_OPTIONS)),
            __metadata("design:paramtypes", [String, Object, LazyStripeAPILoader,
                WindowRef,
                PlatformService])
        ], StripeService);
        return StripeService;
    }());

    var StripeCardComponent = /** @class */ (function () {
        function StripeCardComponent(stripeService) {
            this.stripeService = stripeService;
            this.change = new core.EventEmitter();
            this.complete = new core.EventEmitter();
            this.error = new core.EventEmitter();
            this.options$ = new rxjs.BehaviorSubject({});
            this.elementsOptions$ = new rxjs.BehaviorSubject({});
        }
        Object.defineProperty(StripeCardComponent.prototype, "options", {
            set: function (optionsIn) {
                this.options$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
            set: function (optionsIn) {
                this.elementsOptions$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        StripeCardComponent.prototype.ngOnInit = function () {
            var _this = this;
            var elements$ = this.elementsOptions$.asObservable().pipe(operators.switchMap(function (options) {
                if (Object.keys(options).length > 0) {
                    return _this.stripeService.elements(options);
                }
                return _this.stripeService.elements();
            }));
            rxjs.combineLatest(elements$, this.options$.asObservable().pipe(operators.filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
                var _b = __read(_a, 2), elements = _b[0], options = _b[1];
                if (_this.card) {
                    _this.element = elements.create('card', options);
                    _this.element.mount(_this.card.nativeElement);
                    _this.element.on('change', function (changedCard) {
                        _this.change.emit({
                            card: changedCard,
                            element: _this.element
                        });
                        if (changedCard.complete) {
                            _this.complete.emit({
                                card: changedCard,
                                element: _this.element
                            });
                        }
                        if (changedCard.error) {
                            _this.error.emit(changedCard.error);
                        }
                    });
                }
            });
        };
        StripeCardComponent.prototype.getCard = function () {
            return this.element;
        };
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], StripeCardComponent.prototype, "change", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], StripeCardComponent.prototype, "complete", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], StripeCardComponent.prototype, "error", void 0);
        __decorate([
            core.ViewChild('card'),
            __metadata("design:type", core.ElementRef)
        ], StripeCardComponent.prototype, "card", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], StripeCardComponent.prototype, "options", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], StripeCardComponent.prototype, "elementsOptions", null);
        StripeCardComponent = __decorate([
            core.Component({
                selector: 'ngx-stripe-card',
                template: "<div class=\"field\" #card></div>"
            }),
            __metadata("design:paramtypes", [StripeService])
        ], StripeCardComponent);
        return StripeCardComponent;
    }());

    var NgxStripeModule = /** @class */ (function () {
        function NgxStripeModule() {
        }
        NgxStripeModule_1 = NgxStripeModule;
        NgxStripeModule.forRoot = function (publishableKey, options) {
            return {
                ngModule: NgxStripeModule_1,
                providers: [
                    LazyStripeAPILoader,
                    StripeService,
                    PlatformService,
                    WindowRef,
                    DocumentRef,
                    {
                        provide: STRIPE_PUBLISHABLE_KEY,
                        useValue: publishableKey
                    },
                    {
                        provide: STRIPE_OPTIONS,
                        useValue: options
                    }
                ]
            };
        };
        var NgxStripeModule_1;
        NgxStripeModule = NgxStripeModule_1 = __decorate([
            core.NgModule({
                declarations: [StripeCardComponent],
                exports: [StripeCardComponent]
            })
        ], NgxStripeModule);
        return NgxStripeModule;
    }());

    exports.DocumentRef = DocumentRef;
    exports.LazyStripeAPILoader = LazyStripeAPILoader;
    exports.NgxStripeModule = NgxStripeModule;
    exports.PlatformService = PlatformService;
    exports.STRIPE_OPTIONS = STRIPE_OPTIONS;
    exports.STRIPE_PUBLISHABLE_KEY = STRIPE_PUBLISHABLE_KEY;
    exports.StripeCardComponent = StripeCardComponent;
    exports.StripeService = StripeService;
    exports.WindowRef = WindowRef;
    exports.isBankAccount = isBankAccount;
    exports.isBankAccountData = isBankAccountData;
    exports.isPii = isPii;
    exports.isPiiData = isPiiData;
    exports.isSourceData = isSourceData;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=nomadreservations-ngx-stripe.umd.js.map
