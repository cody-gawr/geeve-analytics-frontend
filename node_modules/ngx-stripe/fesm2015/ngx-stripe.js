import { __decorate, __param } from 'tslib';
import { Inject, PLATFORM_ID, Injectable, InjectionToken, EventEmitter, Output, ViewChild, Input, Component, NgModule } from '@angular/core';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { BehaviorSubject, from, combineLatest } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';

let WindowRef = class WindowRef {
    constructor(platformId) {
        this.platformId = platformId;
    }
    getNativeWindow() {
        if (isPlatformBrowser(this.platformId)) {
            return window;
        }
        return {};
    }
};
WindowRef.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
WindowRef = __decorate([
    Injectable(),
    __param(0, Inject(PLATFORM_ID))
], WindowRef);

let DocumentRef = class DocumentRef {
    constructor(platformId) {
        this.platformId = platformId;
    }
    getNativeDocument() {
        if (isPlatformBrowser(this.platformId)) {
            return document;
        }
        return {};
    }
};
DocumentRef.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DocumentRef = __decorate([
    Injectable(),
    __param(0, Inject(PLATFORM_ID))
], DocumentRef);

let LazyStripeAPILoader = class LazyStripeAPILoader {
    constructor(platformId, window, document) {
        this.platformId = platformId;
        this.window = window;
        this.document = document;
        this.status = new BehaviorSubject({
            error: false,
            loaded: false,
            loading: false
        });
    }
    asStream() {
        this.load();
        return this.status.asObservable();
    }
    isReady() {
        return this.status.getValue().loaded;
    }
    load() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        const status = this.status.getValue();
        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
            this.status.next({
                error: false,
                loaded: true,
                loading: false
            });
        }
        else if (!status.loaded && !status.loading) {
            this.status.next(Object.assign(Object.assign({}, status), { loading: true }));
            const script = this.document.getNativeDocument().createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.defer = true;
            script.src = 'https://js.stripe.com/v3/';
            script.onload = () => {
                this.status.next({
                    error: false,
                    loaded: true,
                    loading: false
                });
            };
            script.onerror = () => {
                this.status.next({
                    error: true,
                    loaded: false,
                    loading: false
                });
            };
            this.document.getNativeDocument().body.appendChild(script);
        }
    }
};
LazyStripeAPILoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: WindowRef },
    { type: DocumentRef }
];
LazyStripeAPILoader = __decorate([
    Injectable(),
    __param(0, Inject(PLATFORM_ID))
], LazyStripeAPILoader);

const STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
const STRIPE_OPTIONS = new InjectionToken('Stripe Options');

function isSourceData(sourceData) {
    return 'type' in sourceData;
}

function isAccount(account) {
    return account === 'account';
}
function isAccountData(accountData) {
    return accountData.legal_entity || accountData.tos_shown_and_accepted;
}
function isBankAccount(account) {
    return account === 'bank_account';
}
function isBankAccountData(bankAccountData) {
    return ('country' in bankAccountData &&
        'currency' in bankAccountData &&
        'routing_number' in bankAccountData &&
        'account_number' in bankAccountData &&
        (bankAccountData.account_holder_type === 'individual' ||
            bankAccountData.account_holder_type === 'company' ||
            bankAccountData.account_holder_type === undefined));
}
function isPii(pii) {
    return pii === 'pii';
}
function isPiiData(piiData) {
    return 'personal_id_number' in piiData;
}

function isHandleCardPaymentOptions(handleCardPaymentOptions) {
    return 'type' in handleCardPaymentOptions;
}
function isPaymentMethodData(paymentMethodData) {
    return paymentMethodData && 'type' in paymentMethodData;
}

class StripeInstance {
    constructor(loader, window, key, options) {
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.loader
            .asStream()
            .pipe(filter((status) => status.loaded === true), first(), map(() => this.window.getNativeWindow().Stripe))
            .subscribe((Stripe) => {
            const stripe = this.options
                ? Stripe(this.key, this.options)
                : Stripe(this.key);
            this.stripe$.next(stripe);
        });
    }
    getInstance() {
        return this.stripe$.getValue();
    }
    elements(options) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), map(stripe => stripe.elements(options)), first());
    }
    createToken(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            if (isAccount(a) && isAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isBankAccount(a) && isBankAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isPii(a) && isPiiData(b)) {
                return from(stripe.createToken(a, b));
            }
            else {
                return from(stripe.createToken(a, b));
            }
        }), first());
    }
    createSource(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            if (isSourceData(a)) {
                return from(stripe.createSource(a));
            }
            return from(stripe.createSource(a, b));
        }), first());
    }
    retrieveSource(source) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            return from(stripe.retrieveSource(source));
        }), first());
    }
    paymentRequest(options) {
        const stripe = this.getInstance();
        if (stripe) {
            return stripe.paymentRequest(options);
        }
        return undefined;
    }
    handleCardPayment(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            if (isHandleCardPaymentOptions(b)) {
                return from(stripe.handleCardPayment(a, b));
            }
            return from(stripe.handleCardPayment(a, b, c));
        }));
    }
    handleCardAction(a) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            return from(stripe.handleCardAction(a));
        }));
    }
    confirmPaymentIntent(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            return from(stripe.confirmPaymentIntent(a, b));
        }));
    }
    createPaymentMethod(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            return from(stripe.createPaymentMethod(a, b, c));
        }), first());
    }
    handleCardSetup(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            if (isPaymentMethodData(c)) {
                return from(stripe.handleCardSetup(a, b, c));
            }
            return from(stripe.handleCardSetup(a, b));
        }));
    }
}

let StripeService = class StripeService {
    constructor(key, options, loader, window) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        if (key) {
            this.stripe = new StripeInstance(this.loader, this.window, key, options);
        }
    }
    getStripeReference() {
        return this.loader.asStream().pipe(filter((status) => status.loaded === true), map(() => this.window.getNativeWindow().Stripe));
    }
    getInstance() {
        return this.stripe.getInstance();
    }
    setKey(key, options) {
        return this.changeKey(key, options);
    }
    changeKey(key, options) {
        this.stripe = new StripeInstance(this.loader, this.window, key, options);
        return this.stripe;
    }
    elements(options) {
        return this.stripe.elements(options);
    }
    createToken(a, b) {
        return this.stripe.createToken(a, b);
    }
    createSource(a, b) {
        return this.stripe.createSource(a, b);
    }
    retrieveSource(source) {
        return this.stripe.retrieveSource(source);
    }
    paymentRequest(options) {
        return this.stripe.paymentRequest(options);
    }
    handleCardPayment(a, b, c) {
        return this.stripe.handleCardPayment(a, b, c);
    }
    handleCardAction(a) {
        return this.stripe.handleCardAction(a);
    }
    createPaymentMethod(a, b, c) {
        return this.stripe.createPaymentMethod(a, b, c);
    }
    confirmPaymentIntent(a, b) {
        return this.stripe.confirmPaymentIntent(a, b);
    }
    handleCardSetup(a, b, c) {
        return this.stripe.handleCardSetup(a, b, c);
    }
};
StripeService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
    { type: LazyStripeAPILoader },
    { type: WindowRef }
];
StripeService = __decorate([
    Injectable(),
    __param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
    __param(1, Inject(STRIPE_OPTIONS))
], StripeService);

let StripeFactoryService = class StripeFactoryService {
    constructor(baseKey, baseOptions, loader, window) {
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    create(key, options) {
        return new StripeInstance(this.loader, this.window, key, options);
    }
};
StripeFactoryService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: String, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
    { type: LazyStripeAPILoader },
    { type: WindowRef }
];
StripeFactoryService = __decorate([
    Injectable(),
    __param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
    __param(1, Inject(STRIPE_OPTIONS))
], StripeFactoryService);

let StripeCardComponent = class StripeCardComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.card = new EventEmitter();
        // tslint:disable-next-line:no-output-on-prefix
        this.on = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
        this.stripe$ = new BehaviorSubject(null);
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    set stripe(stripeIn) {
        this.stripe$.next(stripeIn);
    }
    ngAfterViewInit() {
        const elements$ = combineLatest(this.elementsOptions$.asObservable(), this.stripe$.asObservable()).pipe(switchMap(([options, stripe]) => {
            if (stripe) {
                if (Object.keys(options).length > 0) {
                    return stripe.elements(options);
                }
                return stripe.elements();
            }
            else {
                if (Object.keys(options).length > 0) {
                    return this.stripeService.elements(options);
                }
                return this.stripeService.elements();
            }
        }));
        combineLatest(elements$, this.options$.asObservable().pipe(filter(options => Boolean(options)))).subscribe(([elements, options]) => {
            this.element = elements.create('card', options);
            this.element.on('blur', ev => this.on.emit({
                event: ev,
                type: 'blur'
            }));
            this.element.on('change', ev => this.on.emit({
                event: ev,
                type: 'change'
            }));
            this.element.on('click', ev => this.on.emit({
                event: ev,
                type: 'click'
            }));
            this.element.on('focus', ev => this.on.emit({
                event: ev,
                type: 'focus'
            }));
            this.element.on('ready', ev => this.on.emit({
                event: ev,
                type: 'ready'
            }));
            this.element.mount(this.stripeCard.nativeElement);
            this.card.emit(this.element);
        });
    }
    getCard() {
        return this.element;
    }
};
StripeCardComponent.ctorParameters = () => [
    { type: StripeService }
];
__decorate([
    Output()
], StripeCardComponent.prototype, "card", void 0);
__decorate([
    Output()
], StripeCardComponent.prototype, "on", void 0);
__decorate([
    ViewChild('stripeCard')
], StripeCardComponent.prototype, "stripeCard", void 0);
__decorate([
    Input()
], StripeCardComponent.prototype, "options", null);
__decorate([
    Input()
], StripeCardComponent.prototype, "elementsOptions", null);
__decorate([
    Input()
], StripeCardComponent.prototype, "stripe", null);
StripeCardComponent = __decorate([
    Component({
        selector: 'ngx-stripe-card',
        template: `
    <div class="field" #stripeCard></div>
  `
    })
], StripeCardComponent);

var NgxStripeModule_1;
let NgxStripeModule = NgxStripeModule_1 = class NgxStripeModule {
    static forRoot(publishableKey, options) {
        return {
            ngModule: NgxStripeModule_1,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                StripeFactoryService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    }
    static forChild(publishableKey, options) {
        return {
            ngModule: NgxStripeModule_1,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                StripeFactoryService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    }
};
NgxStripeModule = NgxStripeModule_1 = __decorate([
    NgModule({
        declarations: [StripeCardComponent],
        exports: [StripeCardComponent]
    })
], NgxStripeModule);

/*
 * Public API Surface of ngx-stripe
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DocumentRef, LazyStripeAPILoader, NgxStripeModule, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY, StripeCardComponent, StripeFactoryService, StripeInstance, StripeService, WindowRef, isBankAccount, isBankAccountData, isPii, isPiiData, isSourceData };
//# sourceMappingURL=ngx-stripe.js.map
