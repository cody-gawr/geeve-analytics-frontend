import { BehaviorSubject, from } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
import { isSourceData } from '../interfaces/sources';
import { isAccount, isAccountData, isBankAccount, isBankAccountData, isPii, isPiiData } from '../interfaces/token';
import { isHandleCardPaymentOptions, isPaymentMethodData } from '../interfaces/payment-intent';
export class StripeInstance {
    constructor(loader, window, key, options) {
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.loader
            .asStream()
            .pipe(filter((status) => status.loaded === true), first(), map(() => this.window.getNativeWindow().Stripe))
            .subscribe((Stripe) => {
            const stripe = this.options
                ? Stripe(this.key, this.options)
                : Stripe(this.key);
            this.stripe$.next(stripe);
        });
    }
    getInstance() {
        return this.stripe$.getValue();
    }
    elements(options) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), map(stripe => stripe.elements(options)), first());
    }
    createToken(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            if (isAccount(a) && isAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isBankAccount(a) && isBankAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isPii(a) && isPiiData(b)) {
                return from(stripe.createToken(a, b));
            }
            else {
                return from(stripe.createToken(a, b));
            }
        }), first());
    }
    createSource(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            if (isSourceData(a)) {
                return from(stripe.createSource(a));
            }
            return from(stripe.createSource(a, b));
        }), first());
    }
    retrieveSource(source) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            return from(stripe.retrieveSource(source));
        }), first());
    }
    paymentRequest(options) {
        const stripe = this.getInstance();
        if (stripe) {
            return stripe.paymentRequest(options);
        }
        return undefined;
    }
    handleCardPayment(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            if (isHandleCardPaymentOptions(b)) {
                return from(stripe.handleCardPayment(a, b));
            }
            return from(stripe.handleCardPayment(a, b, c));
        }));
    }
    handleCardAction(a) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            return from(stripe.handleCardAction(a));
        }));
    }
    confirmPaymentIntent(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            return from(stripe.confirmPaymentIntent(a, b));
        }));
    }
    createPaymentMethod(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            return from(stripe.createPaymentMethod(a, b, c));
        }), first());
    }
    handleCardSetup(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            const stripe = s;
            if (isPaymentMethodData(c)) {
                return from(stripe.handleCardSetup(a, b, c));
            }
            return from(stripe.handleCardSetup(a, b));
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,