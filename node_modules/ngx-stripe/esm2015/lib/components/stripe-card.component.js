import { __decorate } from "tslib";
import { Component, Input, ViewChild, EventEmitter, Output } from '@angular/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { switchMap, filter } from 'rxjs/operators';
import { StripeService } from '../services/stripe.service';
let StripeCardComponent = class StripeCardComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.card = new EventEmitter();
        // tslint:disable-next-line:no-output-on-prefix
        this.on = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
        this.stripe$ = new BehaviorSubject(null);
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    set stripe(stripeIn) {
        this.stripe$.next(stripeIn);
    }
    ngAfterViewInit() {
        const elements$ = combineLatest(this.elementsOptions$.asObservable(), this.stripe$.asObservable()).pipe(switchMap(([options, stripe]) => {
            if (stripe) {
                if (Object.keys(options).length > 0) {
                    return stripe.elements(options);
                }
                return stripe.elements();
            }
            else {
                if (Object.keys(options).length > 0) {
                    return this.stripeService.elements(options);
                }
                return this.stripeService.elements();
            }
        }));
        combineLatest(elements$, this.options$.asObservable().pipe(filter(options => Boolean(options)))).subscribe(([elements, options]) => {
            this.element = elements.create('card', options);
            this.element.on('blur', ev => this.on.emit({
                event: ev,
                type: 'blur'
            }));
            this.element.on('change', ev => this.on.emit({
                event: ev,
                type: 'change'
            }));
            this.element.on('click', ev => this.on.emit({
                event: ev,
                type: 'click'
            }));
            this.element.on('focus', ev => this.on.emit({
                event: ev,
                type: 'focus'
            }));
            this.element.on('ready', ev => this.on.emit({
                event: ev,
                type: 'ready'
            }));
            this.element.mount(this.stripeCard.nativeElement);
            this.card.emit(this.element);
        });
    }
    getCard() {
        return this.element;
    }
};
StripeCardComponent.ctorParameters = () => [
    { type: StripeService }
];
__decorate([
    Output()
], StripeCardComponent.prototype, "card", void 0);
__decorate([
    Output()
], StripeCardComponent.prototype, "on", void 0);
__decorate([
    ViewChild('stripeCard')
], StripeCardComponent.prototype, "stripeCard", void 0);
__decorate([
    Input()
], StripeCardComponent.prototype, "options", null);
__decorate([
    Input()
], StripeCardComponent.prototype, "elementsOptions", null);
__decorate([
    Input()
], StripeCardComponent.prototype, "stripe", null);
StripeCardComponent = __decorate([
    Component({
        selector: 'ngx-stripe-card',
        template: `
    <div class="field" #stripeCard></div>
  `
    })
], StripeCardComponent);
export { StripeCardComponent };
//# sourceMappingURL=data:application/json;base64,