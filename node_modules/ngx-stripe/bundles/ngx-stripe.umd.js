(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-stripe', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['ngx-stripe'] = {}, global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, common, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var WindowRef = /** @class */ (function () {
        function WindowRef(platformId) {
            this.platformId = platformId;
        }
        WindowRef.prototype.getNativeWindow = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                return window;
            }
            return {};
        };
        WindowRef.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        WindowRef = __decorate([
            core.Injectable(),
            __param(0, core.Inject(core.PLATFORM_ID))
        ], WindowRef);
        return WindowRef;
    }());

    var DocumentRef = /** @class */ (function () {
        function DocumentRef(platformId) {
            this.platformId = platformId;
        }
        DocumentRef.prototype.getNativeDocument = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                return document;
            }
            return {};
        };
        DocumentRef.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        DocumentRef = __decorate([
            core.Injectable(),
            __param(0, core.Inject(core.PLATFORM_ID))
        ], DocumentRef);
        return DocumentRef;
    }());

    var LazyStripeAPILoader = /** @class */ (function () {
        function LazyStripeAPILoader(platformId, window, document) {
            this.platformId = platformId;
            this.window = window;
            this.document = document;
            this.status = new rxjs.BehaviorSubject({
                error: false,
                loaded: false,
                loading: false
            });
        }
        LazyStripeAPILoader.prototype.asStream = function () {
            this.load();
            return this.status.asObservable();
        };
        LazyStripeAPILoader.prototype.isReady = function () {
            return this.status.getValue().loaded;
        };
        LazyStripeAPILoader.prototype.load = function () {
            var _this = this;
            if (common.isPlatformServer(this.platformId)) {
                return;
            }
            var status = this.status.getValue();
            if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
                this.status.next({
                    error: false,
                    loaded: true,
                    loading: false
                });
            }
            else if (!status.loaded && !status.loading) {
                this.status.next(__assign(__assign({}, status), { loading: true }));
                var script = this.document.getNativeDocument().createElement('script');
                script.type = 'text/javascript';
                script.async = true;
                script.defer = true;
                script.src = 'https://js.stripe.com/v3/';
                script.onload = function () {
                    _this.status.next({
                        error: false,
                        loaded: true,
                        loading: false
                    });
                };
                script.onerror = function () {
                    _this.status.next({
                        error: true,
                        loaded: false,
                        loading: false
                    });
                };
                this.document.getNativeDocument().body.appendChild(script);
            }
        };
        LazyStripeAPILoader.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: WindowRef },
            { type: DocumentRef }
        ]; };
        LazyStripeAPILoader = __decorate([
            core.Injectable(),
            __param(0, core.Inject(core.PLATFORM_ID))
        ], LazyStripeAPILoader);
        return LazyStripeAPILoader;
    }());

    var STRIPE_PUBLISHABLE_KEY = new core.InjectionToken('Stripe Publishable Key');
    var STRIPE_OPTIONS = new core.InjectionToken('Stripe Options');

    function isSourceData(sourceData) {
        return 'type' in sourceData;
    }

    function isAccount(account) {
        return account === 'account';
    }
    function isAccountData(accountData) {
        return accountData.legal_entity || accountData.tos_shown_and_accepted;
    }
    function isBankAccount(account) {
        return account === 'bank_account';
    }
    function isBankAccountData(bankAccountData) {
        return ('country' in bankAccountData &&
            'currency' in bankAccountData &&
            'routing_number' in bankAccountData &&
            'account_number' in bankAccountData &&
            (bankAccountData.account_holder_type === 'individual' ||
                bankAccountData.account_holder_type === 'company' ||
                bankAccountData.account_holder_type === undefined));
    }
    function isPii(pii) {
        return pii === 'pii';
    }
    function isPiiData(piiData) {
        return 'personal_id_number' in piiData;
    }

    function isHandleCardPaymentOptions(handleCardPaymentOptions) {
        return 'type' in handleCardPaymentOptions;
    }
    function isPaymentMethodData(paymentMethodData) {
        return paymentMethodData && 'type' in paymentMethodData;
    }

    var StripeInstance = /** @class */ (function () {
        function StripeInstance(loader, window, key, options) {
            var _this = this;
            this.loader = loader;
            this.window = window;
            this.key = key;
            this.options = options;
            this.stripe$ = new rxjs.BehaviorSubject(undefined);
            this.loader
                .asStream()
                .pipe(operators.filter(function (status) { return status.loaded === true; }), operators.first(), operators.map(function () { return _this.window.getNativeWindow().Stripe; }))
                .subscribe(function (Stripe) {
                var stripe = _this.options
                    ? Stripe(_this.key, _this.options)
                    : Stripe(_this.key);
                _this.stripe$.next(stripe);
            });
        }
        StripeInstance.prototype.getInstance = function () {
            return this.stripe$.getValue();
        };
        StripeInstance.prototype.elements = function (options) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.map(function (stripe) { return stripe.elements(options); }), operators.first());
        };
        StripeInstance.prototype.createToken = function (a, b) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.switchMap(function (s) {
                var stripe = s;
                if (isAccount(a) && isAccountData(b)) {
                    return rxjs.from(stripe.createToken(a, b));
                }
                else if (isBankAccount(a) && isBankAccountData(b)) {
                    return rxjs.from(stripe.createToken(a, b));
                }
                else if (isPii(a) && isPiiData(b)) {
                    return rxjs.from(stripe.createToken(a, b));
                }
                else {
                    return rxjs.from(stripe.createToken(a, b));
                }
            }), operators.first());
        };
        StripeInstance.prototype.createSource = function (a, b) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.switchMap(function (s) {
                var stripe = s;
                if (isSourceData(a)) {
                    return rxjs.from(stripe.createSource(a));
                }
                return rxjs.from(stripe.createSource(a, b));
            }), operators.first());
        };
        StripeInstance.prototype.retrieveSource = function (source) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.switchMap(function (s) {
                var stripe = s;
                return rxjs.from(stripe.retrieveSource(source));
            }), operators.first());
        };
        StripeInstance.prototype.paymentRequest = function (options) {
            var stripe = this.getInstance();
            if (stripe) {
                return stripe.paymentRequest(options);
            }
            return undefined;
        };
        StripeInstance.prototype.handleCardPayment = function (a, b, c) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.switchMap(function (s) {
                var stripe = s;
                if (isHandleCardPaymentOptions(b)) {
                    return rxjs.from(stripe.handleCardPayment(a, b));
                }
                return rxjs.from(stripe.handleCardPayment(a, b, c));
            }));
        };
        StripeInstance.prototype.handleCardAction = function (a) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.switchMap(function (s) {
                var stripe = s;
                return rxjs.from(stripe.handleCardAction(a));
            }));
        };
        StripeInstance.prototype.confirmPaymentIntent = function (a, b) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.switchMap(function (s) {
                var stripe = s;
                return rxjs.from(stripe.confirmPaymentIntent(a, b));
            }));
        };
        StripeInstance.prototype.createPaymentMethod = function (a, b, c) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.switchMap(function (s) {
                var stripe = s;
                return rxjs.from(stripe.createPaymentMethod(a, b, c));
            }), operators.first());
        };
        StripeInstance.prototype.handleCardSetup = function (a, b, c) {
            return this.stripe$.asObservable().pipe(operators.filter(function (stripe) { return Boolean(stripe); }), operators.switchMap(function (s) {
                var stripe = s;
                if (isPaymentMethodData(c)) {
                    return rxjs.from(stripe.handleCardSetup(a, b, c));
                }
                return rxjs.from(stripe.handleCardSetup(a, b));
            }));
        };
        return StripeInstance;
    }());

    var StripeService = /** @class */ (function () {
        function StripeService(key, options, loader, window) {
            this.key = key;
            this.options = options;
            this.loader = loader;
            this.window = window;
            if (key) {
                this.stripe = new StripeInstance(this.loader, this.window, key, options);
            }
        }
        StripeService.prototype.getStripeReference = function () {
            var _this = this;
            return this.loader.asStream().pipe(operators.filter(function (status) { return status.loaded === true; }), operators.map(function () { return _this.window.getNativeWindow().Stripe; }));
        };
        StripeService.prototype.getInstance = function () {
            return this.stripe.getInstance();
        };
        StripeService.prototype.setKey = function (key, options) {
            return this.changeKey(key, options);
        };
        StripeService.prototype.changeKey = function (key, options) {
            this.stripe = new StripeInstance(this.loader, this.window, key, options);
            return this.stripe;
        };
        StripeService.prototype.elements = function (options) {
            return this.stripe.elements(options);
        };
        StripeService.prototype.createToken = function (a, b) {
            return this.stripe.createToken(a, b);
        };
        StripeService.prototype.createSource = function (a, b) {
            return this.stripe.createSource(a, b);
        };
        StripeService.prototype.retrieveSource = function (source) {
            return this.stripe.retrieveSource(source);
        };
        StripeService.prototype.paymentRequest = function (options) {
            return this.stripe.paymentRequest(options);
        };
        StripeService.prototype.handleCardPayment = function (a, b, c) {
            return this.stripe.handleCardPayment(a, b, c);
        };
        StripeService.prototype.handleCardAction = function (a) {
            return this.stripe.handleCardAction(a);
        };
        StripeService.prototype.createPaymentMethod = function (a, b, c) {
            return this.stripe.createPaymentMethod(a, b, c);
        };
        StripeService.prototype.confirmPaymentIntent = function (a, b) {
            return this.stripe.confirmPaymentIntent(a, b);
        };
        StripeService.prototype.handleCardSetup = function (a, b, c) {
            return this.stripe.handleCardSetup(a, b, c);
        };
        StripeService.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [STRIPE_OPTIONS,] }] },
            { type: LazyStripeAPILoader },
            { type: WindowRef }
        ]; };
        StripeService = __decorate([
            core.Injectable(),
            __param(0, core.Inject(STRIPE_PUBLISHABLE_KEY)),
            __param(1, core.Inject(STRIPE_OPTIONS))
        ], StripeService);
        return StripeService;
    }());

    var StripeFactoryService = /** @class */ (function () {
        function StripeFactoryService(baseKey, baseOptions, loader, window) {
            this.baseKey = baseKey;
            this.baseOptions = baseOptions;
            this.loader = loader;
            this.window = window;
        }
        StripeFactoryService.prototype.create = function (key, options) {
            return new StripeInstance(this.loader, this.window, key, options);
        };
        StripeFactoryService.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
            { type: String, decorators: [{ type: core.Inject, args: [STRIPE_OPTIONS,] }] },
            { type: LazyStripeAPILoader },
            { type: WindowRef }
        ]; };
        StripeFactoryService = __decorate([
            core.Injectable(),
            __param(0, core.Inject(STRIPE_PUBLISHABLE_KEY)),
            __param(1, core.Inject(STRIPE_OPTIONS))
        ], StripeFactoryService);
        return StripeFactoryService;
    }());

    var StripeCardComponent = /** @class */ (function () {
        function StripeCardComponent(stripeService) {
            this.stripeService = stripeService;
            this.card = new core.EventEmitter();
            // tslint:disable-next-line:no-output-on-prefix
            this.on = new core.EventEmitter();
            this.options$ = new rxjs.BehaviorSubject({});
            this.elementsOptions$ = new rxjs.BehaviorSubject({});
            this.stripe$ = new rxjs.BehaviorSubject(null);
        }
        Object.defineProperty(StripeCardComponent.prototype, "options", {
            set: function (optionsIn) {
                this.options$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
            set: function (optionsIn) {
                this.elementsOptions$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StripeCardComponent.prototype, "stripe", {
            set: function (stripeIn) {
                this.stripe$.next(stripeIn);
            },
            enumerable: true,
            configurable: true
        });
        StripeCardComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            var elements$ = rxjs.combineLatest(this.elementsOptions$.asObservable(), this.stripe$.asObservable()).pipe(operators.switchMap(function (_a) {
                var _b = __read(_a, 2), options = _b[0], stripe = _b[1];
                if (stripe) {
                    if (Object.keys(options).length > 0) {
                        return stripe.elements(options);
                    }
                    return stripe.elements();
                }
                else {
                    if (Object.keys(options).length > 0) {
                        return _this.stripeService.elements(options);
                    }
                    return _this.stripeService.elements();
                }
            }));
            rxjs.combineLatest(elements$, this.options$.asObservable().pipe(operators.filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
                var _b = __read(_a, 2), elements = _b[0], options = _b[1];
                _this.element = elements.create('card', options);
                _this.element.on('blur', function (ev) {
                    return _this.on.emit({
                        event: ev,
                        type: 'blur'
                    });
                });
                _this.element.on('change', function (ev) {
                    return _this.on.emit({
                        event: ev,
                        type: 'change'
                    });
                });
                _this.element.on('click', function (ev) {
                    return _this.on.emit({
                        event: ev,
                        type: 'click'
                    });
                });
                _this.element.on('focus', function (ev) {
                    return _this.on.emit({
                        event: ev,
                        type: 'focus'
                    });
                });
                _this.element.on('ready', function (ev) {
                    return _this.on.emit({
                        event: ev,
                        type: 'ready'
                    });
                });
                _this.element.mount(_this.stripeCard.nativeElement);
                _this.card.emit(_this.element);
            });
        };
        StripeCardComponent.prototype.getCard = function () {
            return this.element;
        };
        StripeCardComponent.ctorParameters = function () { return [
            { type: StripeService }
        ]; };
        __decorate([
            core.Output()
        ], StripeCardComponent.prototype, "card", void 0);
        __decorate([
            core.Output()
        ], StripeCardComponent.prototype, "on", void 0);
        __decorate([
            core.ViewChild('stripeCard')
        ], StripeCardComponent.prototype, "stripeCard", void 0);
        __decorate([
            core.Input()
        ], StripeCardComponent.prototype, "options", null);
        __decorate([
            core.Input()
        ], StripeCardComponent.prototype, "elementsOptions", null);
        __decorate([
            core.Input()
        ], StripeCardComponent.prototype, "stripe", null);
        StripeCardComponent = __decorate([
            core.Component({
                selector: 'ngx-stripe-card',
                template: "\n    <div class=\"field\" #stripeCard></div>\n  "
            })
        ], StripeCardComponent);
        return StripeCardComponent;
    }());

    var NgxStripeModule = /** @class */ (function () {
        function NgxStripeModule() {
        }
        NgxStripeModule_1 = NgxStripeModule;
        NgxStripeModule.forRoot = function (publishableKey, options) {
            return {
                ngModule: NgxStripeModule_1,
                providers: [
                    LazyStripeAPILoader,
                    StripeService,
                    StripeFactoryService,
                    WindowRef,
                    DocumentRef,
                    {
                        provide: STRIPE_PUBLISHABLE_KEY,
                        useValue: publishableKey
                    },
                    {
                        provide: STRIPE_OPTIONS,
                        useValue: options
                    }
                ]
            };
        };
        NgxStripeModule.forChild = function (publishableKey, options) {
            return {
                ngModule: NgxStripeModule_1,
                providers: [
                    LazyStripeAPILoader,
                    StripeService,
                    StripeFactoryService,
                    WindowRef,
                    DocumentRef,
                    {
                        provide: STRIPE_PUBLISHABLE_KEY,
                        useValue: publishableKey
                    },
                    {
                        provide: STRIPE_OPTIONS,
                        useValue: options
                    }
                ]
            };
        };
        var NgxStripeModule_1;
        NgxStripeModule = NgxStripeModule_1 = __decorate([
            core.NgModule({
                declarations: [StripeCardComponent],
                exports: [StripeCardComponent]
            })
        ], NgxStripeModule);
        return NgxStripeModule;
    }());

    exports.DocumentRef = DocumentRef;
    exports.LazyStripeAPILoader = LazyStripeAPILoader;
    exports.NgxStripeModule = NgxStripeModule;
    exports.STRIPE_OPTIONS = STRIPE_OPTIONS;
    exports.STRIPE_PUBLISHABLE_KEY = STRIPE_PUBLISHABLE_KEY;
    exports.StripeCardComponent = StripeCardComponent;
    exports.StripeFactoryService = StripeFactoryService;
    exports.StripeInstance = StripeInstance;
    exports.StripeService = StripeService;
    exports.WindowRef = WindowRef;
    exports.isBankAccount = isBankAccount;
    exports.isBankAccountData = isBankAccountData;
    exports.isPii = isPii;
    exports.isPiiData = isPiiData;
    exports.isSourceData = isSourceData;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-stripe.umd.js.map
