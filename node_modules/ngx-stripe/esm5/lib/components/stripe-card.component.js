import { __decorate, __read } from "tslib";
import { Component, Input, ViewChild, EventEmitter, Output } from '@angular/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { switchMap, filter } from 'rxjs/operators';
import { StripeService } from '../services/stripe.service';
var StripeCardComponent = /** @class */ (function () {
    function StripeCardComponent(stripeService) {
        this.stripeService = stripeService;
        this.card = new EventEmitter();
        // tslint:disable-next-line:no-output-on-prefix
        this.on = new EventEmitter();
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
        this.stripe$ = new BehaviorSubject(null);
    }
    Object.defineProperty(StripeCardComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StripeCardComponent.prototype, "stripe", {
        set: function (stripeIn) {
            this.stripe$.next(stripeIn);
        },
        enumerable: true,
        configurable: true
    });
    StripeCardComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var elements$ = combineLatest(this.elementsOptions$.asObservable(), this.stripe$.asObservable()).pipe(switchMap(function (_a) {
            var _b = __read(_a, 2), options = _b[0], stripe = _b[1];
            if (stripe) {
                if (Object.keys(options).length > 0) {
                    return stripe.elements(options);
                }
                return stripe.elements();
            }
            else {
                if (Object.keys(options).length > 0) {
                    return _this.stripeService.elements(options);
                }
                return _this.stripeService.elements();
            }
        }));
        combineLatest(elements$, this.options$.asObservable().pipe(filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
            var _b = __read(_a, 2), elements = _b[0], options = _b[1];
            _this.element = elements.create('card', options);
            _this.element.on('blur', function (ev) {
                return _this.on.emit({
                    event: ev,
                    type: 'blur'
                });
            });
            _this.element.on('change', function (ev) {
                return _this.on.emit({
                    event: ev,
                    type: 'change'
                });
            });
            _this.element.on('click', function (ev) {
                return _this.on.emit({
                    event: ev,
                    type: 'click'
                });
            });
            _this.element.on('focus', function (ev) {
                return _this.on.emit({
                    event: ev,
                    type: 'focus'
                });
            });
            _this.element.on('ready', function (ev) {
                return _this.on.emit({
                    event: ev,
                    type: 'ready'
                });
            });
            _this.element.mount(_this.stripeCard.nativeElement);
            _this.card.emit(_this.element);
        });
    };
    StripeCardComponent.prototype.getCard = function () {
        return this.element;
    };
    StripeCardComponent.ctorParameters = function () { return [
        { type: StripeService }
    ]; };
    __decorate([
        Output()
    ], StripeCardComponent.prototype, "card", void 0);
    __decorate([
        Output()
    ], StripeCardComponent.prototype, "on", void 0);
    __decorate([
        ViewChild('stripeCard')
    ], StripeCardComponent.prototype, "stripeCard", void 0);
    __decorate([
        Input()
    ], StripeCardComponent.prototype, "options", null);
    __decorate([
        Input()
    ], StripeCardComponent.prototype, "elementsOptions", null);
    __decorate([
        Input()
    ], StripeCardComponent.prototype, "stripe", null);
    StripeCardComponent = __decorate([
        Component({
            selector: 'ngx-stripe-card',
            template: "\n    <div class=\"field\" #stripeCard></div>\n  "
        })
    ], StripeCardComponent);
    return StripeCardComponent;
}());
export { StripeCardComponent };
//# sourceMappingURL=data:application/json;base64,