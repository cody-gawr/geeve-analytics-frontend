import { __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { WindowRef } from './window-ref.service';
import { LazyStripeAPILoader, Status } from './api-loader.service';
import { STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS } from '../interfaces/stripe';
import { StripeInstance } from './stripe-instance.class';
import { filter, map } from 'rxjs/operators';
var StripeService = /** @class */ (function () {
    function StripeService(key, options, loader, window) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        if (key) {
            this.stripe = new StripeInstance(this.loader, this.window, key, options);
        }
    }
    StripeService.prototype.getStripeReference = function () {
        var _this = this;
        return this.loader.asStream().pipe(filter(function (status) { return status.loaded === true; }), map(function () { return _this.window.getNativeWindow().Stripe; }));
    };
    StripeService.prototype.getInstance = function () {
        return this.stripe.getInstance();
    };
    StripeService.prototype.setKey = function (key, options) {
        return this.changeKey(key, options);
    };
    StripeService.prototype.changeKey = function (key, options) {
        this.stripe = new StripeInstance(this.loader, this.window, key, options);
        return this.stripe;
    };
    StripeService.prototype.elements = function (options) {
        return this.stripe.elements(options);
    };
    StripeService.prototype.createToken = function (a, b) {
        return this.stripe.createToken(a, b);
    };
    StripeService.prototype.createSource = function (a, b) {
        return this.stripe.createSource(a, b);
    };
    StripeService.prototype.retrieveSource = function (source) {
        return this.stripe.retrieveSource(source);
    };
    StripeService.prototype.paymentRequest = function (options) {
        return this.stripe.paymentRequest(options);
    };
    StripeService.prototype.handleCardPayment = function (a, b, c) {
        return this.stripe.handleCardPayment(a, b, c);
    };
    StripeService.prototype.handleCardAction = function (a) {
        return this.stripe.handleCardAction(a);
    };
    StripeService.prototype.createPaymentMethod = function (a, b, c) {
        return this.stripe.createPaymentMethod(a, b, c);
    };
    StripeService.prototype.confirmPaymentIntent = function (a, b) {
        return this.stripe.confirmPaymentIntent(a, b);
    };
    StripeService.prototype.handleCardSetup = function (a, b, c) {
        return this.stripe.handleCardSetup(a, b, c);
    };
    StripeService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
        { type: LazyStripeAPILoader },
        { type: WindowRef }
    ]; };
    StripeService = __decorate([
        Injectable(),
        __param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
        __param(1, Inject(STRIPE_OPTIONS))
    ], StripeService);
    return StripeService;
}());
export { StripeService };
//# sourceMappingURL=data:application/json;base64,