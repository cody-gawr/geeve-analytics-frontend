import { BehaviorSubject, from } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
import { isSourceData } from '../interfaces/sources';
import { isAccount, isAccountData, isBankAccount, isBankAccountData, isPii, isPiiData } from '../interfaces/token';
import { isHandleCardPaymentOptions, isPaymentMethodData } from '../interfaces/payment-intent';
var StripeInstance = /** @class */ (function () {
    function StripeInstance(loader, window, key, options) {
        var _this = this;
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.loader
            .asStream()
            .pipe(filter(function (status) { return status.loaded === true; }), first(), map(function () { return _this.window.getNativeWindow().Stripe; }))
            .subscribe(function (Stripe) {
            var stripe = _this.options
                ? Stripe(_this.key, _this.options)
                : Stripe(_this.key);
            _this.stripe$.next(stripe);
        });
    }
    StripeInstance.prototype.getInstance = function () {
        return this.stripe$.getValue();
    };
    StripeInstance.prototype.elements = function (options) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), map(function (stripe) { return stripe.elements(options); }), first());
    };
    StripeInstance.prototype.createToken = function (a, b) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            var stripe = s;
            if (isAccount(a) && isAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isBankAccount(a) && isBankAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isPii(a) && isPiiData(b)) {
                return from(stripe.createToken(a, b));
            }
            else {
                return from(stripe.createToken(a, b));
            }
        }), first());
    };
    StripeInstance.prototype.createSource = function (a, b) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            var stripe = s;
            if (isSourceData(a)) {
                return from(stripe.createSource(a));
            }
            return from(stripe.createSource(a, b));
        }), first());
    };
    StripeInstance.prototype.retrieveSource = function (source) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            var stripe = s;
            return from(stripe.retrieveSource(source));
        }), first());
    };
    StripeInstance.prototype.paymentRequest = function (options) {
        var stripe = this.getInstance();
        if (stripe) {
            return stripe.paymentRequest(options);
        }
        return undefined;
    };
    StripeInstance.prototype.handleCardPayment = function (a, b, c) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            var stripe = s;
            if (isHandleCardPaymentOptions(b)) {
                return from(stripe.handleCardPayment(a, b));
            }
            return from(stripe.handleCardPayment(a, b, c));
        }));
    };
    StripeInstance.prototype.handleCardAction = function (a) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            var stripe = s;
            return from(stripe.handleCardAction(a));
        }));
    };
    StripeInstance.prototype.confirmPaymentIntent = function (a, b) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            var stripe = s;
            return from(stripe.confirmPaymentIntent(a, b));
        }));
    };
    StripeInstance.prototype.createPaymentMethod = function (a, b, c) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            var stripe = s;
            return from(stripe.createPaymentMethod(a, b, c));
        }), first());
    };
    StripeInstance.prototype.handleCardSetup = function (a, b, c) {
        return this.stripe$.asObservable().pipe(filter(function (stripe) { return Boolean(stripe); }), switchMap(function (s) {
            var stripe = s;
            if (isPaymentMethodData(c)) {
                return from(stripe.handleCardSetup(a, b, c));
            }
            return from(stripe.handleCardSetup(a, b));
        }));
    };
    return StripeInstance;
}());
export { StripeInstance };
//# sourceMappingURL=data:application/json;base64,