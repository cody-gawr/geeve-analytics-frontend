{"version":3,"sources":["ng://input-mask-angular/lib/input-mask-options.ts","ng://input-mask-angular/lib/input-mask-angular.directive.ts","ng://input-mask-angular/lib/input-mask-angular.pipe.ts","ng://input-mask-angular/lib/input-mask-angular.module.ts"],"names":["affineFormats","customNotations","affinityCalculationStrategy","autocomplete","AffinityCalculation","AffinityCalculationStrategy","WHOLE_STRING","this","InputMaskAngularDirective","elementRef","renderer","maskFilled","EventEmitter","extractedValue","formattedText","placeholder","_options","InputMaskOptions","Object","defineProperty","prototype","value","_value","_primaryFormat","ngOnInit","setupListener","nativeElement","input","_this","listener","MaskedTextChangedListener","installOn","class_1","onTextChanged","emit","emitChanges_1","setProperty","String","setText","addEventListener","t","core","ElementRef","Renderer2","InputMaskAngularPipe","transform","primaryFormat","mask","Mask","getOrCreate","stringLength","length","result","apply","CaretString","string","InputMaskAngularModule","declarations","exports"],"mappings":"4VAGE,SACkBA,EACAC,EACAC,EAEAC,QAJA,IAAAH,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,IACVE,EAAAA,oBAAoBC,EAAAA,4BAA4BC,oBACtC,IAAAH,IAAAA,GAAA,GAJAI,KAAAP,cAAAA,EACAO,KAAAN,gBAAAA,EACAM,KAAAL,4BAAAA,EAEAK,KAAAJ,aAAAA,gBCKlB,SAAAK,EACUC,EACAC,GADAH,KAAAE,WAAAA,EACAF,KAAAG,SAAAA,EAPOH,KAAAI,WAAoC,IAAIC,EAAAA,aACxCL,KAAAM,eAAuC,IAAID,EAAAA,aAC3CL,KAAAO,cAAsC,IAAIF,EAAAA,aAC1CL,KAAAQ,YAAoC,IAAIH,EAAAA,aAoBjDL,KAAAS,SAA6B,IAAIC,SAVzCC,OAAAC,eAAoBX,EAAAY,UAAA,QAAK,KAAzB,SAA0BC,GACxBd,KAAKe,OAASD,mCAKhBH,OAAAC,eAAmBX,EAAAY,UAAA,gBAAa,KAAhC,SAAiCC,GAC/Bd,KAAKgB,eAAiBF,mCAKxBH,OAAAC,eAAsBX,EAAAY,UAAA,UAAO,KAA7B,SAA8BC,GAC5Bd,KAAKS,SAAWK,mCAGXb,EAAAY,UAAAI,SAAP,WACEjB,KAAKkB,cAAclB,KAAKE,WAAWiB,gBAG7BlB,EAAAY,UAAAK,cAAR,SAAsBE,GAAtB,IAAAC,EAAArB,KACE,GAAMA,KAAKgB,eAAgB,CACzB,IASMM,EAAsCC,EAAAA,0BAA0BC,UACpExB,KAAKgB,eACLI,EACA,IAAA,WAAI,SAAAK,KAQJ,OAPSA,EAAAZ,UAAAa,cAAP,SACEtB,EACAE,EACAC,IAhBc,SAClBH,EACAE,EACAC,GAEAc,EAAKjB,WAAWuB,KAAKvB,GACrBiB,EAAKf,eAAeqB,KAAKrB,GACzBe,EAAKd,cAAcoB,KAAKpB,GAWpBqB,CAAYxB,EAAYE,EAAgBC,IAE5CkB,EARA,IASAzB,KAAKS,SAAShB,cACdO,KAAKS,SAASf,gBACdM,KAAKS,SAASd,4BACdK,KAAKS,SAASb,cAEhBI,KAAKG,SAAS0B,YAAYT,EAAO,cAAeU,OAAOR,EAASd,gBAC1DR,KAAKe,QACTO,EAASS,QAAQ/B,KAAKe,QAExBf,KAAKQ,YAAYmB,KAAKG,OAAOR,EAASd,qBAEtCY,EAAMY,iBAAiB,SAAS,WAC9BX,EAAKf,eAAeqB,KAAKP,EAAMN,8BArE1B,OAAA,IAAAmB,GAAAhC,GAAAiC,EAAA,qBAAAA,EAAAC,YAAAD,EAAA,qBAAAA,EAAAE,iTCJb,SAAAC,YAKEA,EAAAxB,UAAAyB,UAAA,SACExB,EACAyB,EACA7C,GAEA,QAFA,IAAAA,IAAAA,EAAA,IAEM6C,EAAe,CACnB,IAAMC,EAAOC,EAAAA,KAAKC,YAAYH,EAAe7C,GACvCiD,EAAuB7B,EAAM8B,OAC7BC,EAAsBL,EAAKM,MAC/B,IAAIC,EAAAA,YACFjC,EACA6B,IAEF,GAGF,OAAOb,OAAOe,EAAOtC,cAAcyC,QAErC,OAAOlC,sBApBE,OAAA,IAAAmB,GAAAI,8ECFb,SAAAY,qGAIa,OAAA,IAAAhB,GAAAgB,+EAAAA,EAAsB,CAAAC,aAAA,CAHlBjD,EAA2BoC,GAAoBc,QAAA,CACpDlD,EAA2BoC","sourcesContent":["import {AffinityCalculation, AffinityCalculationStrategy, Notation} from 'ts-input-mask';\n\nexport class InputMaskOptions {\n  constructor(\n    public readonly affineFormats: ReadonlyArray<String> = [],\n    public readonly customNotations: ReadonlyArray<Notation> = [],\n    public readonly affinityCalculationStrategy: AffinityCalculation =\n      new AffinityCalculation(AffinityCalculationStrategy.WHOLE_STRING),\n    public readonly autocomplete: boolean = true\n  ) {\n  }\n}\n","import {Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2} from '@angular/core';\nimport {MaskedTextChangedListener} from 'ts-input-mask';\nimport {InputMaskOptions} from './input-mask-options';\n\n@Directive({\n  selector: 'input[mask]'\n})\nexport class InputMaskAngularDirective implements OnInit {\n  @Output() public maskFilled: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() public extractedValue: EventEmitter<string> = new EventEmitter<string>();\n  @Output() public formattedText: EventEmitter<string> = new EventEmitter<string>();\n  @Output() public placeholder: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) {\n  }\n\n  private _value: string;\n\n  @Input('value') set value(value: string) {\n    this._value = value;\n  }\n\n  private _primaryFormat: string;\n\n  @Input('mask') set primaryFormat(value: string) {\n    this._primaryFormat = value;\n  }\n\n  private _options: InputMaskOptions = new InputMaskOptions();\n\n  @Input('options') set options(value: InputMaskOptions) {\n    this._options = value;\n  }\n\n  public ngOnInit(): void {\n    this.setupListener(this.elementRef.nativeElement);\n  }\n\n  private setupListener(input: HTMLInputElement): void {\n    if (!!this._primaryFormat) {\n      const emitChanges = (\n        maskFilled: boolean,\n        extractedValue: string,\n        formattedText: string\n      ): void => {\n        this.maskFilled.emit(maskFilled);\n        this.extractedValue.emit(extractedValue);\n        this.formattedText.emit(formattedText);\n      };\n      const listener: MaskedTextChangedListener = MaskedTextChangedListener.installOn(\n        this._primaryFormat,\n        input,\n        new class implements MaskedTextChangedListener.ValueListener {\n          public onTextChanged(\n            maskFilled: boolean,\n            extractedValue: string,\n            formattedText: string\n          ): void {\n            emitChanges(maskFilled, extractedValue, formattedText);\n          }\n        }(),\n        this._options.affineFormats,\n        this._options.customNotations,\n        this._options.affinityCalculationStrategy,\n        this._options.autocomplete\n      );\n      this.renderer.setProperty(input, 'placeholder', String(listener.placeholder()));\n      if (!!this._value) {\n        listener.setText(this._value);\n      }\n      this.placeholder.emit(String(listener.placeholder()));\n    } else {\n      input.addEventListener('input', () => {\n        this.extractedValue.emit(input.value);\n      });\n    }\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {CaretString, Mask, Notation} from 'ts-input-mask';\n\n@Pipe({\n  name: 'mask'\n})\nexport class InputMaskAngularPipe implements PipeTransform {\n\n  transform(\n    value: string,\n    primaryFormat: string,\n    customNotations: Array<Notation> = []\n  ): string {\n    if (!!primaryFormat) {\n      const mask = Mask.getOrCreate(primaryFormat, customNotations);\n      const stringLength: number = value.length;\n      const result: Mask.Result = mask.apply(\n        new CaretString(\n          value,\n          stringLength\n        ),\n        false\n      );\n\n      return String(result.formattedText.string);\n    }\n    return value;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { InputMaskAngularDirective } from './input-mask-angular.directive';\nimport { InputMaskAngularPipe } from './input-mask-angular.pipe';\n\n@NgModule({\n  declarations: [InputMaskAngularDirective, InputMaskAngularPipe],\n  exports: [InputMaskAngularDirective, InputMaskAngularPipe]\n})\nexport class InputMaskAngularModule { }\n"]}