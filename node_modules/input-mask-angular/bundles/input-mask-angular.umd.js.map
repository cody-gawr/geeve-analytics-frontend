{"version":3,"file":"input-mask-angular.umd.js","sources":["ng://input-mask-angular/lib/input-mask-options.ts","ng://input-mask-angular/lib/input-mask-angular.directive.ts","ng://input-mask-angular/lib/input-mask-angular.pipe.ts","ng://input-mask-angular/lib/input-mask-angular.module.ts"],"sourcesContent":["import {AffinityCalculation, AffinityCalculationStrategy, Notation} from 'ts-input-mask';\n\nexport class InputMaskOptions {\n  constructor(\n    public readonly affineFormats: ReadonlyArray<String> = [],\n    public readonly customNotations: ReadonlyArray<Notation> = [],\n    public readonly affinityCalculationStrategy: AffinityCalculation =\n      new AffinityCalculation(AffinityCalculationStrategy.WHOLE_STRING),\n    public readonly autocomplete: boolean = true\n  ) {\n  }\n}\n","import {Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2} from '@angular/core';\nimport {MaskedTextChangedListener} from 'ts-input-mask';\nimport {InputMaskOptions} from './input-mask-options';\n\n@Directive({\n  selector: 'input[mask]'\n})\nexport class InputMaskAngularDirective implements OnInit {\n  @Output() public maskFilled: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() public extractedValue: EventEmitter<string> = new EventEmitter<string>();\n  @Output() public formattedText: EventEmitter<string> = new EventEmitter<string>();\n  @Output() public placeholder: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) {\n  }\n\n  private _value: string;\n\n  @Input('value') set value(value: string) {\n    this._value = value;\n  }\n\n  private _primaryFormat: string;\n\n  @Input('mask') set primaryFormat(value: string) {\n    this._primaryFormat = value;\n  }\n\n  private _options: InputMaskOptions = new InputMaskOptions();\n\n  @Input('options') set options(value: InputMaskOptions) {\n    this._options = value;\n  }\n\n  public ngOnInit(): void {\n    this.setupListener(this.elementRef.nativeElement);\n  }\n\n  private setupListener(input: HTMLInputElement): void {\n    if (!!this._primaryFormat) {\n      const emitChanges = (\n        maskFilled: boolean,\n        extractedValue: string,\n        formattedText: string\n      ): void => {\n        this.maskFilled.emit(maskFilled);\n        this.extractedValue.emit(extractedValue);\n        this.formattedText.emit(formattedText);\n      };\n      const listener: MaskedTextChangedListener = MaskedTextChangedListener.installOn(\n        this._primaryFormat,\n        input,\n        new class implements MaskedTextChangedListener.ValueListener {\n          public onTextChanged(\n            maskFilled: boolean,\n            extractedValue: string,\n            formattedText: string\n          ): void {\n            emitChanges(maskFilled, extractedValue, formattedText);\n          }\n        }(),\n        this._options.affineFormats,\n        this._options.customNotations,\n        this._options.affinityCalculationStrategy,\n        this._options.autocomplete\n      );\n      this.renderer.setProperty(input, 'placeholder', String(listener.placeholder()));\n      if (!!this._value) {\n        listener.setText(this._value);\n      }\n      this.placeholder.emit(String(listener.placeholder()));\n    } else {\n      input.addEventListener('input', () => {\n        this.extractedValue.emit(input.value);\n      });\n    }\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {CaretString, Mask, Notation} from 'ts-input-mask';\n\n@Pipe({\n  name: 'mask'\n})\nexport class InputMaskAngularPipe implements PipeTransform {\n\n  transform(\n    value: string,\n    primaryFormat: string,\n    customNotations: Array<Notation> = []\n  ): string {\n    if (!!primaryFormat) {\n      const mask = Mask.getOrCreate(primaryFormat, customNotations);\n      const stringLength: number = value.length;\n      const result: Mask.Result = mask.apply(\n        new CaretString(\n          value,\n          stringLength\n        ),\n        false\n      );\n\n      return String(result.formattedText.string);\n    }\n    return value;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { InputMaskAngularDirective } from './input-mask-angular.directive';\nimport { InputMaskAngularPipe } from './input-mask-angular.pipe';\n\n@NgModule({\n  declarations: [InputMaskAngularDirective, InputMaskAngularPipe],\n  exports: [InputMaskAngularDirective, InputMaskAngularPipe]\n})\nexport class InputMaskAngularModule { }\n"],"names":["AffinityCalculation","AffinityCalculationStrategy","EventEmitter","MaskedTextChangedListener","Directive","Output","Input","Mask","CaretString","Pipe","NgModule"],"mappings":"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"}