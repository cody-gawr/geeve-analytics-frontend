{"version":3,"file":"input-mask-angular.js","sources":["ng://input-mask-angular/lib/input-mask-options.ts","ng://input-mask-angular/lib/input-mask-angular.directive.ts","ng://input-mask-angular/lib/input-mask-angular.pipe.ts","ng://input-mask-angular/lib/input-mask-angular.module.ts","ng://input-mask-angular/projects.ts","ng://input-mask-angular/input-mask-angular.ts"],"sourcesContent":["import {AffinityCalculation, AffinityCalculationStrategy, Notation} from 'ts-input-mask';\n\nexport class InputMaskOptions {\n  constructor(\n    public readonly affineFormats: ReadonlyArray<String> = [],\n    public readonly customNotations: ReadonlyArray<Notation> = [],\n    public readonly affinityCalculationStrategy: AffinityCalculation =\n      new AffinityCalculation(AffinityCalculationStrategy.WHOLE_STRING),\n    public readonly autocomplete: boolean = true\n  ) {\n  }\n}\n","import {Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2} from '@angular/core';\nimport {MaskedTextChangedListener} from 'ts-input-mask';\nimport {InputMaskOptions} from './input-mask-options';\n\n@Directive({\n  selector: 'input[mask]'\n})\nexport class InputMaskAngularDirective implements OnInit {\n  @Output() public maskFilled: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() public extractedValue: EventEmitter<string> = new EventEmitter<string>();\n  @Output() public formattedText: EventEmitter<string> = new EventEmitter<string>();\n  @Output() public placeholder: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) {\n  }\n\n  private _value: string;\n\n  @Input('value') set value(value: string) {\n    this._value = value;\n  }\n\n  private _primaryFormat: string;\n\n  @Input('mask') set primaryFormat(value: string) {\n    this._primaryFormat = value;\n  }\n\n  private _options: InputMaskOptions = new InputMaskOptions();\n\n  @Input('options') set options(value: InputMaskOptions) {\n    this._options = value;\n  }\n\n  public ngOnInit(): void {\n    this.setupListener(this.elementRef.nativeElement);\n  }\n\n  private setupListener(input: HTMLInputElement): void {\n    if (!!this._primaryFormat) {\n      const emitChanges = (\n        maskFilled: boolean,\n        extractedValue: string,\n        formattedText: string\n      ): void => {\n        this.maskFilled.emit(maskFilled);\n        this.extractedValue.emit(extractedValue);\n        this.formattedText.emit(formattedText);\n      };\n      const listener: MaskedTextChangedListener = MaskedTextChangedListener.installOn(\n        this._primaryFormat,\n        input,\n        new class implements MaskedTextChangedListener.ValueListener {\n          public onTextChanged(\n            maskFilled: boolean,\n            extractedValue: string,\n            formattedText: string\n          ): void {\n            emitChanges(maskFilled, extractedValue, formattedText);\n          }\n        }(),\n        this._options.affineFormats,\n        this._options.customNotations,\n        this._options.affinityCalculationStrategy,\n        this._options.autocomplete\n      );\n      this.renderer.setProperty(input, 'placeholder', String(listener.placeholder()));\n      if (!!this._value) {\n        listener.setText(this._value);\n      }\n      this.placeholder.emit(String(listener.placeholder()));\n    } else {\n      input.addEventListener('input', () => {\n        this.extractedValue.emit(input.value);\n      });\n    }\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {CaretString, Mask, Notation} from 'ts-input-mask';\n\n@Pipe({\n  name: 'mask'\n})\nexport class InputMaskAngularPipe implements PipeTransform {\n\n  transform(\n    value: string,\n    primaryFormat: string,\n    customNotations: Array<Notation> = []\n  ): string {\n    if (!!primaryFormat) {\n      const mask = Mask.getOrCreate(primaryFormat, customNotations);\n      const stringLength: number = value.length;\n      const result: Mask.Result = mask.apply(\n        new CaretString(\n          value,\n          stringLength\n        ),\n        false\n      );\n\n      return String(result.formattedText.string);\n    }\n    return value;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { InputMaskAngularDirective } from './input-mask-angular.directive';\nimport { InputMaskAngularPipe } from './input-mask-angular.pipe';\n\n@NgModule({\n  declarations: [InputMaskAngularDirective, InputMaskAngularPipe],\n  exports: [InputMaskAngularDirective, InputMaskAngularPipe]\n})\nexport class InputMaskAngularModule { }\n","/*\n * Public API Surface of input-mask-angular\n */\n\nexport { InputMaskAngularModule } from './lib/input-mask-angular.module';\nexport { InputMaskAngularPipe } from './lib/input-mask-angular.pipe';\nexport { InputMaskAngularDirective } from './lib/input-mask-angular.directive';\nexport { InputMaskOptions } from './lib/input-mask-options';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './projects';\n"],"names":[],"mappings":"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"}